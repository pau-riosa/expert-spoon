f14efc001a7fb9d677dbdb330cb99a58
'use strict';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _HoverState = require("./HoverState.js");

var _invariant = _interopRequireDefault(require("invariant"));

var _SoundManager = _interopRequireDefault(require("../Components/Sound/SoundManager.js"));

var _Platform = _interopRequireDefault(require("../Utilities/Platform"));

var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));

var React = _interopRequireWildcard(require("react"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Transitions = Object.freeze({
  NOT_RESPONDER: {
    DELAY: 'ERROR',
    RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',
    RESPONDER_RELEASE: 'ERROR',
    RESPONDER_TERMINATED: 'ERROR',
    ENTER_PRESS_RECT: 'ERROR',
    LEAVE_PRESS_RECT: 'ERROR',
    LONG_PRESS_DETECTED: 'ERROR'
  },
  RESPONDER_INACTIVE_PRESS_IN: {
    DELAY: 'RESPONDER_ACTIVE_PRESS_IN',
    RESPONDER_GRANT: 'ERROR',
    RESPONDER_RELEASE: 'NOT_RESPONDER',
    RESPONDER_TERMINATED: 'NOT_RESPONDER',
    ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',
    LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',
    LONG_PRESS_DETECTED: 'ERROR'
  },
  RESPONDER_INACTIVE_PRESS_OUT: {
    DELAY: 'RESPONDER_ACTIVE_PRESS_OUT',
    RESPONDER_GRANT: 'ERROR',
    RESPONDER_RELEASE: 'NOT_RESPONDER',
    RESPONDER_TERMINATED: 'NOT_RESPONDER',
    ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',
    LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',
    LONG_PRESS_DETECTED: 'ERROR'
  },
  RESPONDER_ACTIVE_PRESS_IN: {
    DELAY: 'ERROR',
    RESPONDER_GRANT: 'ERROR',
    RESPONDER_RELEASE: 'NOT_RESPONDER',
    RESPONDER_TERMINATED: 'NOT_RESPONDER',
    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',
    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',
    LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN'
  },
  RESPONDER_ACTIVE_PRESS_OUT: {
    DELAY: 'ERROR',
    RESPONDER_GRANT: 'ERROR',
    RESPONDER_RELEASE: 'NOT_RESPONDER',
    RESPONDER_TERMINATED: 'NOT_RESPONDER',
    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',
    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',
    LONG_PRESS_DETECTED: 'ERROR'
  },
  RESPONDER_ACTIVE_LONG_PRESS_IN: {
    DELAY: 'ERROR',
    RESPONDER_GRANT: 'ERROR',
    RESPONDER_RELEASE: 'NOT_RESPONDER',
    RESPONDER_TERMINATED: 'NOT_RESPONDER',
    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
    LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN'
  },
  RESPONDER_ACTIVE_LONG_PRESS_OUT: {
    DELAY: 'ERROR',
    RESPONDER_GRANT: 'ERROR',
    RESPONDER_RELEASE: 'NOT_RESPONDER',
    RESPONDER_TERMINATED: 'NOT_RESPONDER',
    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
    LONG_PRESS_DETECTED: 'ERROR'
  },
  ERROR: {
    DELAY: 'NOT_RESPONDER',
    RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',
    RESPONDER_RELEASE: 'NOT_RESPONDER',
    RESPONDER_TERMINATED: 'NOT_RESPONDER',
    ENTER_PRESS_RECT: 'NOT_RESPONDER',
    LEAVE_PRESS_RECT: 'NOT_RESPONDER',
    LONG_PRESS_DETECTED: 'NOT_RESPONDER'
  }
});

var isActiveSignal = function isActiveSignal(signal) {
  return signal === 'RESPONDER_ACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
};

var isActivationSignal = function isActivationSignal(signal) {
  return signal === 'RESPONDER_ACTIVE_PRESS_OUT' || signal === 'RESPONDER_ACTIVE_PRESS_IN';
};

var isPressInSignal = function isPressInSignal(signal) {
  return signal === 'RESPONDER_INACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_PRESS_IN' || signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';
};

var isTerminalSignal = function isTerminalSignal(signal) {
  return signal === 'RESPONDER_TERMINATED' || signal === 'RESPONDER_RELEASE';
};

var DEFAULT_LONG_PRESS_DELAY_MS = 500;
var DEFAULT_PRESS_DELAY_MS = 0;
var DEFAULT_PRESS_RECT_OFFSETS = {
  bottom: 30,
  left: 20,
  right: 20,
  top: 20
};

var Pressability = function () {
  function Pressability(config) {
    var _this = this;

    (0, _classCallCheck2.default)(this, Pressability);
    this._eventHandlers = null;
    this._hoverInDelayTimeout = null;
    this._hoverOutDelayTimeout = null;
    this._isHovered = false;
    this._longPressDelayTimeout = null;
    this._pressDelayTimeout = null;
    this._pressOutDelayTimeout = null;
    this._responderID = null;
    this._responderRegion = null;
    this._touchState = 'NOT_RESPONDER';

    this._measureCallback = function (left, top, width, height, pageX, pageY) {
      if (!left && !top && !width && !height && !pageX && !pageY) {
        return;
      }

      _this._responderRegion = {
        bottom: pageY + height,
        left: pageX,
        right: pageX + width,
        top: pageY
      };
    };

    this._config = config;
  }

  (0, _createClass2.default)(Pressability, [{
    key: "reset",
    value: function reset() {
      this._cancelHoverInDelayTimeout();

      this._cancelHoverOutDelayTimeout();

      this._cancelLongPressDelayTimeout();

      this._cancelPressDelayTimeout();

      this._cancelPressOutDelayTimeout();
    }
  }, {
    key: "getEventHandlers",
    value: function getEventHandlers() {
      if (this._eventHandlers == null) {
        this._eventHandlers = this._createEventHandlers();
      }

      return this._eventHandlers;
    }
  }, {
    key: "_createEventHandlers",
    value: function _createEventHandlers() {
      var _this2 = this;

      var focusEventHandlers = {
        onBlur: function onBlur(event) {
          var onBlur = _this2._config.onBlur;

          if (onBlur != null) {
            onBlur(event);
          }
        },
        onFocus: function onFocus(event) {
          var onFocus = _this2._config.onFocus;

          if (onFocus != null) {
            onFocus(event);
          }
        }
      };
      var responderEventHandlers = {
        onStartShouldSetResponder: function onStartShouldSetResponder() {
          var onStartShouldSetResponder = _this2._config.onStartShouldSetResponder;
          return onStartShouldSetResponder == null ? true : onStartShouldSetResponder();
        },
        onResponderGrant: function onResponderGrant(event) {
          event.persist();

          _this2._cancelPressOutDelayTimeout();

          _this2._responderID = event.currentTarget;
          _this2._touchState = 'NOT_RESPONDER';

          _this2._receiveSignal('RESPONDER_GRANT', event);

          var _this2$_config = _this2._config,
              getLongPressDelayMS = _this2$_config.getLongPressDelayMS,
              getPressDelayMS = _this2$_config.getPressDelayMS;
          var pressDelay = getDelayMS(getPressDelayMS, 0, DEFAULT_PRESS_DELAY_MS);

          if (pressDelay > 0) {
            _this2._pressDelayTimeout = setTimeout(function () {
              _this2._receiveSignal('DELAY', event);
            }, pressDelay);
          } else {
            _this2._receiveSignal('DELAY', event);
          }

          var longPressDelay = getDelayMS(getLongPressDelayMS, 10, DEFAULT_LONG_PRESS_DELAY_MS);
          _this2._longPressDelayTimeout = setTimeout(function () {
            _this2._handleLongPress(event);
          }, longPressDelay + pressDelay);
        },
        onResponderMove: function onResponderMove(event) {
          if (_this2._config.onPressMove != null) {
            _this2._config.onPressMove(event);
          }

          var responderRegion = _this2._responderRegion;

          if (responderRegion == null) {
            return;
          }

          var touch = getTouchFromPressEvent(event);

          if (touch == null) {
            _this2._cancelLongPressDelayTimeout();

            _this2._receiveSignal('LEAVE_PRESS_RECT', event);

            return;
          }

          if (_this2._touchActivatePosition != null) {
            var deltaX = _this2._touchActivatePosition.pageX - touch.pageX;
            var deltaY = _this2._touchActivatePosition.pageY - touch.pageY;

            if (Math.hypot(deltaX, deltaY) > 10) {
              _this2._cancelLongPressDelayTimeout();
            }
          }

          if (_this2._isTouchWithinResponderRegion(touch, responderRegion)) {
            _this2._receiveSignal('ENTER_PRESS_RECT', event);
          } else {
            _this2._cancelLongPressDelayTimeout();

            _this2._receiveSignal('LEAVE_PRESS_RECT', event);
          }
        },
        onResponderRelease: function onResponderRelease(event) {
          _this2._receiveSignal('RESPONDER_RELEASE', event);
        },
        onResponderTerminate: function onResponderTerminate(event) {
          _this2._receiveSignal('RESPONDER_TERMINATED', event);
        },
        onResponderTerminationRequest: function onResponderTerminationRequest() {
          var onResponderTerminationRequest = _this2._config.onResponderTerminationRequest;
          return onResponderTerminationRequest == null ? true : onResponderTerminationRequest();
        },
        onClick: function onClick(event) {
          var onPress = _this2._config.onPress;

          if (onPress != null) {
            onPress(event);
          }
        }
      };
      var mouseEventHandlers = _Platform.default.OS === 'ios' || _Platform.default.OS === 'android' ? null : {
        onMouseEnter: function onMouseEnter(event) {
          if ((0, _HoverState.isHoverEnabled)()) {
            _this2._isHovered = true;

            _this2._cancelHoverOutDelayTimeout();

            var _this2$_config2 = _this2._config,
                onHoverIn = _this2$_config2.onHoverIn,
                getHoverInDelayMS = _this2$_config2.getHoverInDelayMS;

            if (onHoverIn != null) {
              var delay = getDelayMS(getHoverInDelayMS);

              if (delay > 0) {
                _this2._hoverInDelayTimeout = setTimeout(function () {
                  onHoverIn(event);
                }, delay);
              } else {
                onHoverIn(event);
              }
            }
          }
        },
        onMouseLeave: function onMouseLeave(event) {
          if (_this2._isHovered) {
            _this2._isHovered = false;

            _this2._cancelHoverInDelayTimeout();

            var _this2$_config3 = _this2._config,
                onHoverOut = _this2$_config3.onHoverOut,
                getHoverOutDelayMS = _this2$_config3.getHoverOutDelayMS;

            if (onHoverOut != null) {
              var delay = getDelayMS(getHoverOutDelayMS);

              if (delay > 0) {
                _this2._hoverInDelayTimeout = setTimeout(function () {
                  onHoverOut(event);
                }, delay);
              } else {
                onHoverOut(event);
              }
            }
          }
        }
      };
      return _objectSpread({}, focusEventHandlers, {}, responderEventHandlers, {}, mouseEventHandlers);
    }
  }, {
    key: "_receiveSignal",
    value: function _receiveSignal(signal, event) {
      var _Transitions$prevStat;

      var prevState = this._touchState;
      var nextState = (_Transitions$prevStat = Transitions[prevState]) == null ? void 0 : _Transitions$prevStat[signal];

      if (this._responderID == null && signal === 'RESPONDER_RELEASE') {
        return;
      }

      (0, _invariant.default)(nextState != null && nextState !== 'ERROR', 'Pressability: Invalid signal `%s` for state `%s` on responder: %s', signal, prevState, typeof this._responderID === 'number' ? this._responderID : '<<host component>>');

      if (prevState !== nextState) {
        this._performTransitionSideEffects(prevState, nextState, signal, event);

        this._touchState = nextState;
      }
    }
  }, {
    key: "_performTransitionSideEffects",
    value: function _performTransitionSideEffects(prevState, nextState, signal, event) {
      if (isTerminalSignal(signal)) {
        this._touchActivatePosition = null;

        this._cancelLongPressDelayTimeout();
      }

      var isInitialTransition = prevState === 'NOT_RESPONDER' && nextState === 'RESPONDER_INACTIVE_PRESS_IN';
      var isActivationTransiton = !isActivationSignal(prevState) && isActivationSignal(nextState);

      if (isInitialTransition || isActivationTransiton) {
        this._measureResponderRegion();
      }

      if (isPressInSignal(prevState) && signal === 'LONG_PRESS_DETECTED') {
        var onLongPress = this._config.onLongPress;

        if (onLongPress != null) {
          onLongPress(event);
        }
      }

      var isPrevActive = isActiveSignal(prevState);
      var isNextActive = isActiveSignal(nextState);

      if (!isPrevActive && isNextActive) {
        this._activate(event);
      } else if (isPrevActive && !isNextActive) {
        this._deactivate(event);
      }

      if (isPressInSignal(prevState) && signal === 'RESPONDER_RELEASE') {
        var _this$_config = this._config,
            _onLongPress = _this$_config.onLongPress,
            onPress = _this$_config.onPress,
            getTouchSoundDisabled = _this$_config.getTouchSoundDisabled;

        if (onPress != null) {
          var isPressCanceledByLongPress = _onLongPress != null && prevState === 'RESPONDER_ACTIVE_LONG_PRESS_IN' && this._shouldLongPressCancelPress();

          if (!isPressCanceledByLongPress) {
            var _ref;

            if (!isNextActive && !isPrevActive) {
              this._activate(event);

              this._deactivate(event);
            }

            var isTouchSoundDisabled = (_ref = getTouchSoundDisabled == null ? null : getTouchSoundDisabled()) != null ? _ref : false;

            if (_Platform.default.OS === 'android' && !isTouchSoundDisabled) {
              _SoundManager.default.playTouchSound();
            }

            onPress(event);
          }
        }
      }

      this._cancelPressDelayTimeout();
    }
  }, {
    key: "_activate",
    value: function _activate(event) {
      var onPressIn = this._config.onPressIn;
      var touch = getTouchFromPressEvent(event);
      this._touchActivatePosition = {
        pageX: touch.pageX,
        pageY: touch.pageY
      };

      if (onPressIn != null) {
        onPressIn(event);
      }
    }
  }, {
    key: "_deactivate",
    value: function _deactivate(event) {
      var _this$_config2 = this._config,
          onPressOut = _this$_config2.onPressOut,
          getPressOutDelayMS = _this$_config2.getPressOutDelayMS;

      if (onPressOut != null) {
        var delay = getDelayMS(getPressOutDelayMS);

        if (delay > 0) {
          this._pressOutDelayTimeout = setTimeout(function () {
            onPressOut(event);
          }, delay);
        } else {
          onPressOut(event);
        }
      }
    }
  }, {
    key: "_measureResponderRegion",
    value: function _measureResponderRegion() {
      if (this._responderID == null) {
        return;
      }

      if (typeof this._responderID === 'number') {
        _UIManager.default.measure(this._responderID, this._measureCallback);
      } else {
        this._responderID.measure(this._measureCallback);
      }
    }
  }, {
    key: "_isTouchWithinResponderRegion",
    value: function _isTouchWithinResponderRegion(touch, responderRegion) {
      var _this$_config3 = this._config,
          getHitSlop = _this$_config3.getHitSlop,
          getPressRectOffset = _this$_config3.getPressRectOffset;
      var regionBottom = responderRegion.bottom;
      var regionLeft = responderRegion.left;
      var regionRight = responderRegion.right;
      var regionTop = responderRegion.top;
      var hitSlop = getHitSlop == null ? null : getHitSlop();

      if (hitSlop != null) {
        if (hitSlop.bottom != null) {
          regionBottom += hitSlop.bottom;
        }

        if (hitSlop.left != null) {
          regionLeft -= hitSlop.left;
        }

        if (hitSlop.right != null) {
          regionRight += hitSlop.right;
        }

        if (hitSlop.top != null) {
          regionTop -= hitSlop.top;
        }
      }

      var rectOffset = getPressRectOffset == null ? null : getPressRectOffset();
      regionBottom += rectOffset == null || rectOffset.bottom == null ? DEFAULT_PRESS_RECT_OFFSETS.bottom : rectOffset.bottom;
      regionLeft -= rectOffset == null || rectOffset.left == null ? DEFAULT_PRESS_RECT_OFFSETS.left : rectOffset.left;
      regionRight += rectOffset == null || rectOffset.right == null ? DEFAULT_PRESS_RECT_OFFSETS.right : rectOffset.right;
      regionTop -= rectOffset == null || rectOffset.top == null ? DEFAULT_PRESS_RECT_OFFSETS.top : rectOffset.top;
      return touch.pageX > regionLeft && touch.pageX < regionRight && touch.pageY > regionTop && touch.pageY < regionBottom;
    }
  }, {
    key: "_handleLongPress",
    value: function _handleLongPress(event) {
      if (this._touchState === 'RESPONDER_ACTIVE_PRESS_IN' || this._touchState === 'RESPONDER_ACTIVE_LONG_PRESS_IN') {
        this._receiveSignal('LONG_PRESS_DETECTED', event);
      }
    }
  }, {
    key: "_shouldLongPressCancelPress",
    value: function _shouldLongPressCancelPress() {
      return this._config.onLongPressShouldCancelPress == null || this._config.onLongPressShouldCancelPress();
    }
  }, {
    key: "_cancelHoverInDelayTimeout",
    value: function _cancelHoverInDelayTimeout() {
      if (this._hoverInDelayTimeout != null) {
        clearTimeout(this._hoverInDelayTimeout);
        this._hoverInDelayTimeout = null;
      }
    }
  }, {
    key: "_cancelHoverOutDelayTimeout",
    value: function _cancelHoverOutDelayTimeout() {
      if (this._hoverOutDelayTimeout != null) {
        clearTimeout(this._hoverOutDelayTimeout);
        this._hoverOutDelayTimeout = null;
      }
    }
  }, {
    key: "_cancelLongPressDelayTimeout",
    value: function _cancelLongPressDelayTimeout() {
      if (this._longPressDelayTimeout != null) {
        clearTimeout(this._longPressDelayTimeout);
        this._longPressDelayTimeout = null;
      }
    }
  }, {
    key: "_cancelPressDelayTimeout",
    value: function _cancelPressDelayTimeout() {
      if (this._pressDelayTimeout != null) {
        clearTimeout(this._pressDelayTimeout);
        this._pressDelayTimeout = null;
      }
    }
  }, {
    key: "_cancelPressOutDelayTimeout",
    value: function _cancelPressOutDelayTimeout() {
      if (this._pressOutDelayTimeout != null) {
        clearTimeout(this._pressOutDelayTimeout);
        this._pressOutDelayTimeout = null;
      }
    }
  }]);
  return Pressability;
}();

exports.default = Pressability;

var getDelayMS = function getDelayMS(getDelay) {
  var _ref2;

  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  return Math.max(min, (_ref2 = getDelay == null ? null : getDelay()) != null ? _ref2 : fallback);
};

var getTouchFromPressEvent = function getTouchFromPressEvent(event) {
  var _event$nativeEvent = event.nativeEvent,
      changedTouches = _event$nativeEvent.changedTouches,
      touches = _event$nativeEvent.touches;

  if (touches != null && touches.length > 0) {
    return touches[0];
  }

  if (changedTouches != null && changedTouches.length > 0) {
    return changedTouches[0];
  }

  return event.nativeEvent;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,