8d5d6ed94d5874fb06b8244eb1fef67b
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _NativeEventEmitter = _interopRequireDefault(require("../../EventEmitter/NativeEventEmitter"));

var _NativeAnimatedModule = _interopRequireDefault(require("./NativeAnimatedModule"));

var _invariant = _interopRequireDefault(require("invariant"));

var __nativeAnimatedNodeTagCount = 1;
var __nativeAnimationIdCount = 1;
var nativeEventEmitter;
var queueConnections = false;
var queue = [];
var API = {
  enableQueue: function enableQueue() {
    queueConnections = true;
  },
  disableQueue: function disableQueue() {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');
    queueConnections = false;

    for (var q = 0, l = queue.length; q < l; q++) {
      var args = queue[q];

      _NativeAnimatedModule.default.connectAnimatedNodes(args[0], args[1]);
    }

    queue.length = 0;
  },
  createAnimatedNode: function createAnimatedNode(tag, config) {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

    _NativeAnimatedModule.default.createAnimatedNode(tag, config);
  },
  startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

    _NativeAnimatedModule.default.startListeningToAnimatedNodeValue(tag);
  },
  stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

    _NativeAnimatedModule.default.stopListeningToAnimatedNodeValue(tag);
  },
  connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

    if (queueConnections) {
      queue.push([parentTag, childTag]);
      return;
    }

    _NativeAnimatedModule.default.connectAnimatedNodes(parentTag, childTag);
  },
  disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

    _NativeAnimatedModule.default.disconnectAnimatedNodes(parentTag, childTag);
  },
  startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

    _NativeAnimatedModule.default.startAnimatingNode(animationId, nodeTag, config, endCallback);
  },
  stopAnimation: function stopAnimation(animationId) {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

    _NativeAnimatedModule.default.stopAnimation(animationId);
  },
  setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

    _NativeAnimatedModule.default.setAnimatedNodeValue(nodeTag, value);
  },
  setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

    _NativeAnimatedModule.default.setAnimatedNodeOffset(nodeTag, offset);
  },
  flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

    _NativeAnimatedModule.default.flattenAnimatedNodeOffset(nodeTag);
  },
  extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

    _NativeAnimatedModule.default.extractAnimatedNodeOffset(nodeTag);
  },
  connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

    _NativeAnimatedModule.default.connectAnimatedNodeToView(nodeTag, viewTag);
  },
  disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

    _NativeAnimatedModule.default.disconnectAnimatedNodeFromView(nodeTag, viewTag);
  },
  restoreDefaultValues: function restoreDefaultValues(nodeTag) {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

    if (_NativeAnimatedModule.default.restoreDefaultValues != null) {
      _NativeAnimatedModule.default.restoreDefaultValues(nodeTag);
    }
  },
  dropAnimatedNode: function dropAnimatedNode(tag) {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

    _NativeAnimatedModule.default.dropAnimatedNode(tag);
  },
  addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

    _NativeAnimatedModule.default.addAnimatedEventToView(viewTag, eventName, eventMapping);
  },
  removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
    (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');

    _NativeAnimatedModule.default.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
  }
};
var STYLES_WHITELIST = {
  opacity: true,
  transform: true,
  borderRadius: true,
  borderBottomEndRadius: true,
  borderBottomLeftRadius: true,
  borderBottomRightRadius: true,
  borderBottomStartRadius: true,
  borderTopEndRadius: true,
  borderTopLeftRadius: true,
  borderTopRightRadius: true,
  borderTopStartRadius: true,
  elevation: true,
  shadowOpacity: true,
  shadowRadius: true,
  scaleX: true,
  scaleY: true,
  translateX: true,
  translateY: true
};
var TRANSFORM_WHITELIST = {
  translateX: true,
  translateY: true,
  scale: true,
  scaleX: true,
  scaleY: true,
  rotate: true,
  rotateX: true,
  rotateY: true,
  rotateZ: true,
  perspective: true
};
var SUPPORTED_INTERPOLATION_PARAMS = {
  inputRange: true,
  outputRange: true,
  extrapolate: true,
  extrapolateRight: true,
  extrapolateLeft: true
};

function addWhitelistedStyleProp(prop) {
  STYLES_WHITELIST[prop] = true;
}

function addWhitelistedTransformProp(prop) {
  TRANSFORM_WHITELIST[prop] = true;
}

function addWhitelistedInterpolationParam(param) {
  SUPPORTED_INTERPOLATION_PARAMS[param] = true;
}

function validateTransform(configs) {
  configs.forEach(function (config) {
    if (!TRANSFORM_WHITELIST.hasOwnProperty(config.property)) {
      throw new Error("Property '" + config.property + "' is not supported by native animated module");
    }
  });
}

function validateStyles(styles) {
  for (var _key in styles) {
    if (!STYLES_WHITELIST.hasOwnProperty(_key)) {
      throw new Error("Style property '" + _key + "' is not supported by native animated module");
    }
  }
}

function validateInterpolation(config) {
  for (var _key2 in config) {
    if (!SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(_key2)) {
      throw new Error("Interpolation property '" + _key2 + "' is not supported by native animated module");
    }
  }
}

function generateNewNodeTag() {
  return __nativeAnimatedNodeTagCount++;
}

function generateNewAnimationId() {
  return __nativeAnimationIdCount++;
}

function assertNativeAnimatedModule() {
  (0, _invariant.default)(_NativeAnimatedModule.default, 'Native animated module is not available');
}

var _warnedMissingNativeAnimated = false;

function shouldUseNativeDriver(config) {
  if (config.useNativeDriver == null) {
    console.warn('Animated: `useNativeDriver` was not specified. This is a required ' + 'option and must be explicitly set to `true` or `false`');
  }

  if (config.useNativeDriver === true && !_NativeAnimatedModule.default) {
    if (!_warnedMissingNativeAnimated) {
      console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'More info: https://github.com/facebook/react-native/issues/11094#issuecomment-263240420');
      _warnedMissingNativeAnimated = true;
    }

    return false;
  }

  return config.useNativeDriver || false;
}

function transformDataType(value) {
  if (typeof value !== 'string') {
    return value;
  }

  if (/deg$/.test(value)) {
    var degrees = parseFloat(value) || 0;
    var radians = degrees * Math.PI / 180.0;
    return radians;
  } else {
    return value;
  }
}

module.exports = {
  API: API,
  addWhitelistedStyleProp: addWhitelistedStyleProp,
  addWhitelistedTransformProp: addWhitelistedTransformProp,
  addWhitelistedInterpolationParam: addWhitelistedInterpolationParam,
  validateStyles: validateStyles,
  validateTransform: validateTransform,
  validateInterpolation: validateInterpolation,
  generateNewNodeTag: generateNewNodeTag,
  generateNewAnimationId: generateNewAnimationId,
  assertNativeAnimatedModule: assertNativeAnimatedModule,
  shouldUseNativeDriver: shouldUseNativeDriver,
  transformDataType: transformDataType,

  get nativeEventEmitter() {
    if (!nativeEventEmitter) {
      nativeEventEmitter = new _NativeEventEmitter.default(_NativeAnimatedModule.default);
    }

    return nativeEventEmitter;
  }

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5hdGl2ZUFuaW1hdGVkSGVscGVyLmpzIl0sIm5hbWVzIjpbIl9fbmF0aXZlQW5pbWF0ZWROb2RlVGFnQ291bnQiLCJfX25hdGl2ZUFuaW1hdGlvbklkQ291bnQiLCJuYXRpdmVFdmVudEVtaXR0ZXIiLCJxdWV1ZUNvbm5lY3Rpb25zIiwicXVldWUiLCJBUEkiLCJlbmFibGVRdWV1ZSIsImRpc2FibGVRdWV1ZSIsIk5hdGl2ZUFuaW1hdGVkTW9kdWxlIiwicSIsImwiLCJsZW5ndGgiLCJhcmdzIiwiY29ubmVjdEFuaW1hdGVkTm9kZXMiLCJjcmVhdGVBbmltYXRlZE5vZGUiLCJ0YWciLCJjb25maWciLCJzdGFydExpc3RlbmluZ1RvQW5pbWF0ZWROb2RlVmFsdWUiLCJzdG9wTGlzdGVuaW5nVG9BbmltYXRlZE5vZGVWYWx1ZSIsInBhcmVudFRhZyIsImNoaWxkVGFnIiwicHVzaCIsImRpc2Nvbm5lY3RBbmltYXRlZE5vZGVzIiwic3RhcnRBbmltYXRpbmdOb2RlIiwiYW5pbWF0aW9uSWQiLCJub2RlVGFnIiwiZW5kQ2FsbGJhY2siLCJzdG9wQW5pbWF0aW9uIiwic2V0QW5pbWF0ZWROb2RlVmFsdWUiLCJ2YWx1ZSIsInNldEFuaW1hdGVkTm9kZU9mZnNldCIsIm9mZnNldCIsImZsYXR0ZW5BbmltYXRlZE5vZGVPZmZzZXQiLCJleHRyYWN0QW5pbWF0ZWROb2RlT2Zmc2V0IiwiY29ubmVjdEFuaW1hdGVkTm9kZVRvVmlldyIsInZpZXdUYWciLCJkaXNjb25uZWN0QW5pbWF0ZWROb2RlRnJvbVZpZXciLCJyZXN0b3JlRGVmYXVsdFZhbHVlcyIsImRyb3BBbmltYXRlZE5vZGUiLCJhZGRBbmltYXRlZEV2ZW50VG9WaWV3IiwiZXZlbnROYW1lIiwiZXZlbnRNYXBwaW5nIiwicmVtb3ZlQW5pbWF0ZWRFdmVudEZyb21WaWV3IiwiYW5pbWF0ZWROb2RlVGFnIiwiU1RZTEVTX1dISVRFTElTVCIsIm9wYWNpdHkiLCJ0cmFuc2Zvcm0iLCJib3JkZXJSYWRpdXMiLCJib3JkZXJCb3R0b21FbmRSYWRpdXMiLCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzIiwiYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMiLCJib3JkZXJCb3R0b21TdGFydFJhZGl1cyIsImJvcmRlclRvcEVuZFJhZGl1cyIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsImJvcmRlclRvcFN0YXJ0UmFkaXVzIiwiZWxldmF0aW9uIiwic2hhZG93T3BhY2l0eSIsInNoYWRvd1JhZGl1cyIsInNjYWxlWCIsInNjYWxlWSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwiVFJBTlNGT1JNX1dISVRFTElTVCIsInNjYWxlIiwicm90YXRlIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwicGVyc3BlY3RpdmUiLCJTVVBQT1JURURfSU5URVJQT0xBVElPTl9QQVJBTVMiLCJpbnB1dFJhbmdlIiwib3V0cHV0UmFuZ2UiLCJleHRyYXBvbGF0ZSIsImV4dHJhcG9sYXRlUmlnaHQiLCJleHRyYXBvbGF0ZUxlZnQiLCJhZGRXaGl0ZWxpc3RlZFN0eWxlUHJvcCIsInByb3AiLCJhZGRXaGl0ZWxpc3RlZFRyYW5zZm9ybVByb3AiLCJhZGRXaGl0ZWxpc3RlZEludGVycG9sYXRpb25QYXJhbSIsInBhcmFtIiwidmFsaWRhdGVUcmFuc2Zvcm0iLCJjb25maWdzIiwiZm9yRWFjaCIsImhhc093blByb3BlcnR5IiwicHJvcGVydHkiLCJFcnJvciIsInZhbGlkYXRlU3R5bGVzIiwic3R5bGVzIiwia2V5IiwidmFsaWRhdGVJbnRlcnBvbGF0aW9uIiwiZ2VuZXJhdGVOZXdOb2RlVGFnIiwiZ2VuZXJhdGVOZXdBbmltYXRpb25JZCIsImFzc2VydE5hdGl2ZUFuaW1hdGVkTW9kdWxlIiwiX3dhcm5lZE1pc3NpbmdOYXRpdmVBbmltYXRlZCIsInNob3VsZFVzZU5hdGl2ZURyaXZlciIsInVzZU5hdGl2ZURyaXZlciIsImNvbnNvbGUiLCJ3YXJuIiwidHJhbnNmb3JtRGF0YVR5cGUiLCJ0ZXN0IiwiZGVncmVlcyIsInBhcnNlRmxvYXQiLCJyYWRpYW5zIiwiTWF0aCIsIlBJIiwibW9kdWxlIiwiZXhwb3J0cyIsIk5hdGl2ZUV2ZW50RW1pdHRlciJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7QUFFQTs7QUFFQTs7QUFRQTs7QUFFQSxJQUFJQSw0QkFBNEIsR0FBRyxDQUFuQztBQUNBLElBQUlDLHdCQUF3QixHQUFHLENBQS9CO0FBRUEsSUFBSUMsa0JBQUo7QUFFQSxJQUFJQyxnQkFBZ0IsR0FBRyxLQUF2QjtBQUNBLElBQUlDLEtBQUssR0FBRyxFQUFaO0FBTUEsSUFBTUMsR0FBRyxHQUFHO0FBQ1ZDLEVBQUFBLFdBQVcsRUFBRSx1QkFBaUI7QUFDNUJILElBQUFBLGdCQUFnQixHQUFHLElBQW5CO0FBQ0QsR0FIUztBQUlWSSxFQUFBQSxZQUFZLEVBQUUsd0JBQWlCO0FBQzdCLDRCQUFVQyw2QkFBVixFQUFnQyx5Q0FBaEM7QUFDQUwsSUFBQUEsZ0JBQWdCLEdBQUcsS0FBbkI7O0FBQ0EsU0FBSyxJQUFJTSxDQUFDLEdBQUcsQ0FBUixFQUFXQyxDQUFDLEdBQUdOLEtBQUssQ0FBQ08sTUFBMUIsRUFBa0NGLENBQUMsR0FBR0MsQ0FBdEMsRUFBeUNELENBQUMsRUFBMUMsRUFBOEM7QUFDNUMsVUFBTUcsSUFBSSxHQUFHUixLQUFLLENBQUNLLENBQUQsQ0FBbEI7O0FBQ0FELG9DQUFxQkssb0JBQXJCLENBQTBDRCxJQUFJLENBQUMsQ0FBRCxDQUE5QyxFQUFtREEsSUFBSSxDQUFDLENBQUQsQ0FBdkQ7QUFDRDs7QUFDRFIsSUFBQUEsS0FBSyxDQUFDTyxNQUFOLEdBQWUsQ0FBZjtBQUNELEdBWlM7QUFhVkcsRUFBQUEsa0JBQWtCLEVBQUUsNEJBQVNDLEdBQVQsRUFBc0JDLE1BQXRCLEVBQXdEO0FBQzFFLDRCQUFVUiw2QkFBVixFQUFnQyx5Q0FBaEM7O0FBQ0FBLGtDQUFxQk0sa0JBQXJCLENBQXdDQyxHQUF4QyxFQUE2Q0MsTUFBN0M7QUFDRCxHQWhCUztBQWlCVkMsRUFBQUEsaUNBQWlDLEVBQUUsMkNB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LDJCQUEyQixFQUEzQkEsMkJBSGU7QUFJZkMsRUFBQUEsZ0NBQWdDLEVBQWhDQSxnQ0FKZTtBQUtmUSxFQUFBQSxjQUFjLEVBQWRBLGNBTGU7QUFNZk4sRUFBQUEsaUJBQWlCLEVBQWpCQSxpQkFOZTtBQU9mUyxFQUFBQSxxQkFBcUIsRUFBckJBLHFCQVBlO0FBUWZDLEVBQUFBLGtCQUFrQixFQUFsQkEsa0JBUmU7QUFTZkMsRUFBQUEsc0JBQXNCLEVBQXRCQSxzQkFUZTtBQVVmQyxFQUFBQSwwQkFBMEIsRUFBMUJBLDBCQVZlO0FBV2ZFLEVBQUFBLHFCQUFxQixFQUFyQkEscUJBWGU7QUFZZkksRUFBQUEsaUJBQWlCLEVBQWpCQSxpQkFaZTs7QUFjZixNQUFJakcsa0JBQUosR0FBNkM7QUFDM0MsUUFBSSxDQUFDQSxrQkFBTCxFQUF5QjtBQUN2QkEsTUFBQUEsa0JBQWtCLEdBQUcsSUFBSTBHLDJCQUFKLENBQXVCcEcsNkJBQXZCLENBQXJCO0FBQ0Q7O0FBQ0QsV0FBT04sa0JBQVA7QUFDRDs7QUFuQmMsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IE5hdGl2ZUV2ZW50RW1pdHRlciBmcm9tICcuLi8uLi9FdmVudEVtaXR0ZXIvTmF0aXZlRXZlbnRFbWl0dGVyJztcbmltcG9ydCB0eXBlIHtFdmVudENvbmZpZ30gZnJvbSAnLi9BbmltYXRlZEV2ZW50JztcbmltcG9ydCBOYXRpdmVBbmltYXRlZE1vZHVsZSBmcm9tICcuL05hdGl2ZUFuaW1hdGVkTW9kdWxlJztcbmltcG9ydCB0eXBlIHtcbiAgRXZlbnRNYXBwaW5nLFxuICBBbmltYXRlZE5vZGVDb25maWcsXG4gIEFuaW1hdGluZ05vZGVDb25maWcsXG59IGZyb20gJy4vTmF0aXZlQW5pbWF0ZWRNb2R1bGUnO1xuaW1wb3J0IHR5cGUge0FuaW1hdGlvbkNvbmZpZywgRW5kQ2FsbGJhY2t9IGZyb20gJy4vYW5pbWF0aW9ucy9BbmltYXRpb24nO1xuaW1wb3J0IHR5cGUge0ludGVycG9sYXRpb25Db25maWdUeXBlfSBmcm9tICcuL25vZGVzL0FuaW1hdGVkSW50ZXJwb2xhdGlvbic7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbmxldCBfX25hdGl2ZUFuaW1hdGVkTm9kZVRhZ0NvdW50ID0gMTsgLyogdXNlZCBmb3IgYW5pbWF0ZWQgbm9kZXMgKi9cbmxldCBfX25hdGl2ZUFuaW1hdGlvbklkQ291bnQgPSAxOyAvKiB1c2VkIGZvciBzdGFydGVkIGFuaW1hdGlvbnMgKi9cblxubGV0IG5hdGl2ZUV2ZW50RW1pdHRlcjtcblxubGV0IHF1ZXVlQ29ubmVjdGlvbnMgPSBmYWxzZTtcbmxldCBxdWV1ZSA9IFtdO1xuXG4vKipcbiAqIFNpbXBsZSB3cmFwcGVycyBhcm91bmQgTmF0aXZlQW5pbWF0ZWRNb2R1bGUgdG8gcHJvdmlkZSBmbG93IGFuZCBhdXRvY29tcGxldGUgc3VwcG9ydCBmb3JcbiAqIHRoZSBuYXRpdmUgbW9kdWxlIG1ldGhvZHNcbiAqL1xuY29uc3QgQVBJID0ge1xuICBlbmFibGVRdWV1ZTogZnVuY3Rpb24oKTogdm9pZCB7XG4gICAgcXVldWVDb25uZWN0aW9ucyA9IHRydWU7XG4gIH0sXG4gIGRpc2FibGVRdWV1ZTogZnVuY3Rpb24oKTogdm9pZCB7XG4gICAgaW52YXJpYW50KE5hdGl2ZUFuaW1hdGVkTW9kdWxlLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgcXVldWVDb25uZWN0aW9ucyA9IGZhbHNlO1xuICAgIGZvciAobGV0IHEgPSAwLCBsID0gcXVldWUubGVuZ3RoOyBxIDwgbDsgcSsrKSB7XG4gICAgICBjb25zdCBhcmdzID0gcXVldWVbcV07XG4gICAgICBOYXRpdmVBbmltYXRlZE1vZHVsZS5jb25uZWN0QW5pbWF0ZWROb2RlcyhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICB9XG4gICAgcXVldWUubGVuZ3RoID0gMDtcbiAgfSxcbiAgY3JlYXRlQW5pbWF0ZWROb2RlOiBmdW5jdGlvbih0YWc6IG51bWJlciwgY29uZmlnOiBBbmltYXRlZE5vZGVDb25maWcpOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQoTmF0aXZlQW5pbWF0ZWRNb2R1bGUsICdOYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICBOYXRpdmVBbmltYXRlZE1vZHVsZS5jcmVhdGVBbmltYXRlZE5vZGUodGFnLCBjb25maWcpO1xuICB9LFxuICBzdGFydExpc3RlbmluZ1RvQW5pbWF0ZWROb2RlVmFsdWU6IGZ1bmN0aW9uKHRhZzogbnVtYmVyKSB7XG4gICAgaW52YXJpYW50KE5hdGl2ZUFuaW1hdGVkTW9kdWxlLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgTmF0aXZlQW5pbWF0ZWRNb2R1bGUuc3RhcnRMaXN0ZW5pbmdUb0FuaW1hdGVkTm9kZVZhbHVlKHRhZyk7XG4gIH0sXG4gIHN0b3BMaXN0ZW5pbmdUb0FuaW1hdGVkTm9kZVZhbHVlOiBmdW5jdGlvbih0YWc6IG51bWJlcikge1xuICAgIGludmFyaWFudChOYXRpdmVBbmltYXRlZE1vZHVsZSwgJ05hdGl2ZSBhbmltYXRlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIE5hdGl2ZUFuaW1hdGVkTW9kdWxlLnN0b3BMaXN0ZW5pbmdUb0FuaW1hdGVkTm9kZVZhbHVlKHRhZyk7XG4gIH0sXG4gIGNvbm5lY3RBbmltYXRlZE5vZGVzOiBmdW5jdGlvbihwYXJlbnRUYWc6IG51bWJlciwgY2hpbGRUYWc6IG51bWJlcik6IHZvaWQge1xuICAgIGludmFyaWFudChOYXRpdmVBbmltYXRlZE1vZHVsZSwgJ05hdGl2ZSBhbmltYXRlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIGlmIChxdWV1ZUNvbm5lY3Rpb25zKSB7XG4gICAgICBxdWV1ZS5wdXNoKFtwYXJlbnRUYWcsIGNoaWxkVGFnXSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIE5hdGl2ZUFuaW1hdGVkTW9kdWxlLmNvbm5lY3RBbmltYXRlZE5vZGVzKHBhcmVudFRhZywgY2hpbGRUYWcpO1xuICB9LFxuICBkaXNjb25uZWN0QW5pbWF0ZWROb2RlczogZnVuY3Rpb24ocGFyZW50VGFnOiBudW1iZXIsIGNoaWxkVGFnOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQoTmF0aXZlQW5pbWF0ZWRNb2R1bGUsICdOYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICBOYXRpdmVBbmltYXRlZE1vZHVsZS5kaXNjb25uZWN0QW5pbWF0ZWROb2RlcyhwYXJlbnRUYWcsIGNoaWxkVGFnKTtcbiAgfSxcbiAgc3RhcnRBbmltYXRpbmdOb2RlOiBmdW5jdGlvbihcbiAgICBhbmltYXRpb25JZDogbnVtYmVyLFxuICAgIG5vZGVUYWc6IG51bWJlcixcbiAgICBjb25maWc6IEFuaW1hdGluZ05vZGVDb25maWcsXG4gICAgZW5kQ2FsbGJhY2s6IEVuZENhbGxiYWNrLFxuICApOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQoTmF0aXZlQW5pbWF0ZWRNb2R1bGUsICdOYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICBOYXRpdmVBbmltYXRlZE1vZHVsZS5zdGFydEFuaW1hdGluZ05vZGUoXG4gICAgICBhbmltYXRpb25JZCxcbiAgICAgIG5vZGVUYWcsXG4gICAgICBjb25maWcsXG4gICAgICBlbmRDYWxsYmFjayxcbiAgICApO1xuICB9LFxuICBzdG9wQW5pbWF0aW9uOiBmdW5jdGlvbihhbmltYXRpb25JZDogbnVtYmVyKSB7XG4gICAgaW52YXJpYW50KE5hdGl2ZUFuaW1hdGVkTW9kdWxlLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgTmF0aXZlQW5pbWF0ZWRNb2R1bGUuc3RvcEFuaW1hdGlvbihhbmltYXRpb25JZCk7XG4gIH0sXG4gIHNldEFuaW1hdGVkTm9kZVZhbHVlOiBmdW5jdGlvbihub2RlVGFnOiBudW1iZXIsIHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQoTmF0aXZlQW5pbWF0ZWRNb2R1bGUsICdOYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICBOYXRpdmVBbmltYXRlZE1vZHVsZS5zZXRBbmltYXRlZE5vZGVWYWx1ZShub2RlVGFnLCB2YWx1ZSk7XG4gIH0sXG4gIHNldEFuaW1hdGVkTm9kZU9mZnNldDogZnVuY3Rpb24obm9kZVRhZzogbnVtYmVyLCBvZmZzZXQ6IG51bWJlcik6IHZvaWQge1xuICAgIGludmFyaWFudChOYXRpdmVBbmltYXRlZE1vZHVsZSwgJ05hdGl2ZSBhbmltYXRlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIE5hdGl2ZUFuaW1hdGVkTW9kdWxlLnNldEFuaW1hdGVkTm9kZU9mZnNldChub2RlVGFnLCBvZmZzZXQpO1xuICB9LFxuICBmbGF0dGVuQW5pbWF0ZWROb2RlT2Zmc2V0OiBmdW5jdGlvbihub2RlVGFnOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQoTmF0aXZlQW5pbWF0ZWRNb2R1bGUsICdOYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICBOYXRpdmVBbmltYXRlZE1vZHVsZS5mbGF0dGVuQW5pbWF0ZWROb2RlT2Zmc2V0KG5vZGVUYWcpO1xuICB9LFxuICBleHRyYWN0QW5pbWF0ZWROb2RlT2Zmc2V0OiBmdW5jdGlvbihub2RlVGFnOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQoTmF0aXZlQW5pbWF0ZWRNb2R1bGUsICdOYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICBOYXRpdmVBbmltYXRlZE1vZHVsZS5leHRyYWN0QW5pbWF0ZWROb2RlT2Zmc2V0KG5vZGVUYWcpO1xuICB9LFxuICBjb25uZWN0QW5pbWF0ZWROb2RlVG9WaWV3OiBmdW5jdGlvbihub2RlVGFnOiBudW1iZXIsIHZpZXdUYWc6IG51bWJlcik6IHZvaWQge1xuICAgIGludmFyaWFudChOYXRpdmVBbmltYXRlZE1vZHVsZSwgJ05hdGl2ZSBhbmltYXRlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIE5hdGl2ZUFuaW1hdGVkTW9kdWxlLmNvbm5lY3RBbmltYXRlZE5vZGVUb1ZpZXcobm9kZVRhZywgdmlld1RhZyk7XG4gIH0sXG4gIGRpc2Nvbm5lY3RBbmltYXRlZE5vZGVGcm9tVmlldzogZnVuY3Rpb24oXG4gICAgbm9kZVRhZzogbnVtYmVyLFxuICAgIHZpZXdUYWc6IG51bWJlcixcbiAgKTogdm9pZCB7XG4gICAgaW52YXJpYW50KE5hdGl2ZUFuaW1hdGVkTW9kdWxlLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgTmF0aXZlQW5pbWF0ZWRNb2R1bGUuZGlzY29ubmVjdEFuaW1hdGVkTm9kZUZyb21WaWV3KG5vZGVUYWcsIHZpZXdUYWcpO1xuICB9LFxuICByZXN0b3JlRGVmYXVsdFZhbHVlczogZnVuY3Rpb24obm9kZVRhZzogbnVtYmVyKTogdm9pZCB7XG4gICAgaW52YXJpYW50KE5hdGl2ZUFuaW1hdGVkTW9kdWxlLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgLy8gQmFja3dhcmRzIGNvbXBhdCB3aXRoIG9sZGVyIG5hdGl2ZSBydW50aW1lcywgY2FuIGJlIHJlbW92ZWQgbGF0ZXIuXG4gICAgaWYgKE5hdGl2ZUFuaW1hdGVkTW9kdWxlLnJlc3RvcmVEZWZhdWx0VmFsdWVzICE9IG51bGwpIHtcbiAgICAgIE5hdGl2ZUFuaW1hdGVkTW9kdWxlLnJlc3RvcmVEZWZhdWx0VmFsdWVzKG5vZGVUYWcpO1xuICAgIH1cbiAgfSxcbiAgZHJvcEFuaW1hdGVkTm9kZTogZnVuY3Rpb24odGFnOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQoTmF0aXZlQW5pbWF0ZWRNb2R1bGUsICdOYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICBOYXRpdmVBbmltYXRlZE1vZHVsZS5kcm9wQW5pbWF0ZWROb2RlKHRhZyk7XG4gIH0sXG4gIGFkZEFuaW1hdGVkRXZlbnRUb1ZpZXc6IGZ1bmN0aW9uKFxuICAgIHZpZXdUYWc6IG51bWJlcixcbiAgICBldmVudE5hbWU6IHN0cmluZyxcbiAgICBldmVudE1hcHBpbmc6IEV2ZW50TWFwcGluZyxcbiAgKSB7XG4gICAgaW52YXJpYW50KE5hdGl2ZUFuaW1hdGVkTW9kdWxlLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgTmF0aXZlQW5pbWF0ZWRNb2R1bGUuYWRkQW5pbWF0ZWRFdmVudFRvVmlldyhcbiAgICAgIHZpZXdUYWcsXG4gICAgICBldmVudE5hbWUsXG4gICAgICBldmVudE1hcHBpbmcsXG4gICAgKTtcbiAgfSxcbiAgcmVtb3ZlQW5pbWF0ZWRFdmVudEZyb21WaWV3KFxuICAgIHZpZXdUYWc6IG51bWJlcixcbiAgICBldmVudE5hbWU6IHN0cmluZyxcbiAgICBhbmltYXRlZE5vZGVUYWc6IG51bWJlcixcbiAgKSB7XG4gICAgaW52YXJpYW50KE5hdGl2ZUFuaW1hdGVkTW9kdWxlLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgTmF0aXZlQW5pbWF0ZWRNb2R1bGUucmVtb3ZlQW5pbWF0ZWRFdmVudEZyb21WaWV3KFxuICAgICAgdmlld1RhZyxcbiAgICAgIGV2ZW50TmFtZSxcbiAgICAgIGFuaW1hdGVkTm9kZVRhZyxcbiAgICApO1xuICB9LFxufTtcblxuLyoqXG4gKiBTdHlsZXMgYWxsb3dlZCBieSB0aGUgbmF0aXZlIGFuaW1hdGVkIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEluIGdlbmVyYWwgbmF0aXZlIGFuaW1hdGVkIGltcGxlbWVudGF0aW9uIHNob3VsZCBzdXBwb3J0IGFueSBudW1lcmljIHByb3BlcnR5IHRoYXQgZG9lc24ndCBuZWVkXG4gKiB0byBiZSB1cGRhdGVkIHRocm91Z2ggdGhlIHNoYWRvdyB2aWV3IGhpZXJhcmNoeSAoYWxsIG5vbi1sYXlvdXQgcHJvcGVydGllcykuXG4gKi9cbmNvbnN0IFNUWUxFU19XSElURUxJU1QgPSB7XG4gIG9wYWNpdHk6IHRydWUsXG4gIHRyYW5zZm9ybTogdHJ1ZSxcbiAgYm9yZGVyUmFkaXVzOiB0cnVlLFxuICBib3JkZXJCb3R0b21FbmRSYWRpdXM6IHRydWUsXG4gIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IHRydWUsXG4gIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiB0cnVlLFxuICBib3JkZXJCb3R0b21TdGFydFJhZGl1czogdHJ1ZSxcbiAgYm9yZGVyVG9wRW5kUmFkaXVzOiB0cnVlLFxuICBib3JkZXJUb3BMZWZ0UmFkaXVzOiB0cnVlLFxuICBib3JkZXJUb3BSaWdodFJhZGl1czogdHJ1ZSxcbiAgYm9yZGVyVG9wU3RhcnRSYWRpdXM6IHRydWUsXG4gIGVsZXZhdGlvbjogdHJ1ZSxcbiAgLyogaW9zIHN0eWxlcyAqL1xuICBzaGFkb3dPcGFjaXR5OiB0cnVlLFxuICBzaGFkb3dSYWRpdXM6IHRydWUsXG4gIC8qIGxlZ2FjeSBhbmRyb2lkIHRyYW5zZm9ybSBwcm9wZXJ0aWVzICovXG4gIHNjYWxlWDogdHJ1ZSxcbiAgc2NhbGVZOiB0cnVlLFxuICB0cmFuc2xhdGVYOiB0cnVlLFxuICB0cmFuc2xhdGVZOiB0cnVlLFxufTtcblxuY29uc3QgVFJBTlNGT1JNX1dISVRFTElTVCA9IHtcbiAgdHJhbnNsYXRlWDogdHJ1ZSxcbiAgdHJhbnNsYXRlWTogdHJ1ZSxcbiAgc2NhbGU6IHRydWUsXG4gIHNjYWxlWDogdHJ1ZSxcbiAgc2NhbGVZOiB0cnVlLFxuICByb3RhdGU6IHRydWUsXG4gIHJvdGF0ZVg6IHRydWUsXG4gIHJvdGF0ZVk6IHRydWUsXG4gIHJvdGF0ZVo6IHRydWUsXG4gIHBlcnNwZWN0aXZlOiB0cnVlLFxufTtcblxuY29uc3QgU1VQUE9SVEVEX0lOVEVSUE9MQVRJT05fUEFSQU1TID0ge1xuICBpbnB1dFJhbmdlOiB0cnVlLFxuICBvdXRwdXRSYW5nZTogdHJ1ZSxcbiAgZXh0cmFwb2xhdGU6IHRydWUsXG4gIGV4dHJhcG9sYXRlUmlnaHQ6IHRydWUsXG4gIGV4dHJhcG9sYXRlTGVmdDogdHJ1ZSxcbn07XG5cbmZ1bmN0aW9uIGFkZFdoaXRlbGlzdGVkU3R5bGVQcm9wKHByb3A6IHN0cmluZyk6IHZvaWQge1xuICBTVFlMRVNfV0hJVEVMSVNUW3Byb3BdID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gYWRkV2hpdGVsaXN0ZWRUcmFuc2Zvcm1Qcm9wKHByb3A6IHN0cmluZyk6IHZvaWQge1xuICBUUkFOU0ZPUk1fV0hJVEVMSVNUW3Byb3BdID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gYWRkV2hpdGVsaXN0ZWRJbnRlcnBvbGF0aW9uUGFyYW0ocGFyYW06IHN0cmluZyk6IHZvaWQge1xuICBTVVBQT1JURURfSU5URVJQT0xBVElPTl9QQVJBTVNbcGFyYW1dID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVUcmFuc2Zvcm0oXG4gIGNvbmZpZ3M6IEFycmF5PFxuICAgIHwge1xuICAgICAgICB0eXBlOiAnYW5pbWF0ZWQnLFxuICAgICAgICBwcm9wZXJ0eTogc3RyaW5nLFxuICAgICAgICBub2RlVGFnOiA/bnVtYmVyLFxuICAgICAgICAuLi5cbiAgICAgIH1cbiAgICB8IHtcbiAgICAgICAgdHlwZTogJ3N0YXRpYycsXG4gICAgICAgIHByb3BlcnR5OiBzdHJpbmcsXG4gICAgICAgIHZhbHVlOiBudW1iZXIgfCBzdHJpbmcsXG4gICAgICAgIC4uLlxuICAgICAgfSxcbiAgPixcbik6IHZvaWQge1xuICBjb25maWdzLmZvckVhY2goY29uZmlnID0+IHtcbiAgICBpZiAoIVRSQU5TRk9STV9XSElURUxJU1QuaGFzT3duUHJvcGVydHkoY29uZmlnLnByb3BlcnR5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgUHJvcGVydHkgJyR7XG4gICAgICAgICAgY29uZmlnLnByb3BlcnR5XG4gICAgICAgIH0nIGlzIG5vdCBzdXBwb3J0ZWQgYnkgbmF0aXZlIGFuaW1hdGVkIG1vZHVsZWAsXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlU3R5bGVzKHN0eWxlczoge1trZXk6IHN0cmluZ106ID9udW1iZXIsIC4uLn0pOiB2b2lkIHtcbiAgZm9yIChjb25zdCBrZXkgaW4gc3R5bGVzKSB7XG4gICAgaWYgKCFTVFlMRVNfV0hJVEVMSVNULmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFN0eWxlIHByb3BlcnR5ICcke2tleX0nIGlzIG5vdCBzdXBwb3J0ZWQgYnkgbmF0aXZlIGFuaW1hdGVkIG1vZHVsZWAsXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUludGVycG9sYXRpb24oY29uZmlnOiBJbnRlcnBvbGF0aW9uQ29uZmlnVHlwZSk6IHZvaWQge1xuICBmb3IgKGNvbnN0IGtleSBpbiBjb25maWcpIHtcbiAgICBpZiAoIVNVUFBPUlRFRF9JTlRFUlBPTEFUSU9OX1BBUkFNUy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBJbnRlcnBvbGF0aW9uIHByb3BlcnR5ICcke2tleX0nIGlzIG5vdCBzdXBwb3J0ZWQgYnkgbmF0aXZlIGFuaW1hdGVkIG1vZHVsZWAsXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZU5ld05vZGVUYWcoKTogbnVtYmVyIHtcbiAgcmV0dXJuIF9fbmF0aXZlQW5pbWF0ZWROb2RlVGFnQ291bnQrKztcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVOZXdBbmltYXRpb25JZCgpOiBudW1iZXIge1xuICByZXR1cm4gX19uYXRpdmVBbmltYXRpb25JZENvdW50Kys7XG59XG5cbmZ1bmN0aW9uIGFzc2VydE5hdGl2ZUFuaW1hdGVkTW9kdWxlKCk6IHZvaWQge1xuICBpbnZhcmlhbnQoTmF0aXZlQW5pbWF0ZWRNb2R1bGUsICdOYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUnKTtcbn1cblxubGV0IF93YXJuZWRNaXNzaW5nTmF0aXZlQW5pbWF0ZWQgPSBmYWxzZTtcblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlRHJpdmVyKGNvbmZpZzogQW5pbWF0aW9uQ29uZmlnIHwgRXZlbnRDb25maWcpOiBib29sZWFuIHtcbiAgaWYgKGNvbmZpZy51c2VOYXRpdmVEcml2ZXIgPT0gbnVsbCkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdBbmltYXRlZDogYHVzZU5hdGl2ZURyaXZlcmAgd2FzIG5vdCBzcGVjaWZpZWQuIFRoaXMgaXMgYSByZXF1aXJlZCAnICtcbiAgICAgICAgJ29wdGlvbiBhbmQgbXVzdCBiZSBleHBsaWNpdGx5IHNldCB0byBgdHJ1ZWAgb3IgYGZhbHNlYCcsXG4gICAgKTtcbiAgfVxuXG4gIGlmIChjb25maWcudXNlTmF0aXZlRHJpdmVyID09PSB0cnVlICYmICFOYXRpdmVBbmltYXRlZE1vZHVsZSkge1xuICAgIGlmICghX3dhcm5lZE1pc3NpbmdOYXRpdmVBbmltYXRlZCkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnQW5pbWF0ZWQ6IGB1c2VOYXRpdmVEcml2ZXJgIGlzIG5vdCBzdXBwb3J0ZWQgYmVjYXVzZSB0aGUgbmF0aXZlICcgK1xuICAgICAgICAgICdhbmltYXRlZCBtb2R1bGUgaXMgbWlzc2luZy4gRmFsbGluZyBiYWNrIHRvIEpTLWJhc2VkIGFuaW1hdGlvbi4gVG8gJyArXG4gICAgICAgICAgJ3Jlc29sdmUgdGhpcywgYWRkIGBSQ1RBbmltYXRpb25gIG1vZHVsZSB0byB0aGlzIGFwcCwgb3IgcmVtb3ZlICcgK1xuICAgICAgICAgICdgdXNlTmF0aXZlRHJpdmVyYC4gJyArXG4gICAgICAgICAgJ01vcmUgaW5mbzogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9pc3N1ZXMvMTEwOTQjaXNzdWVjb21tZW50LTI2MzI0MDQyMCcsXG4gICAgICApO1xuICAgICAgX3dhcm5lZE1pc3NpbmdOYXRpdmVBbmltYXRlZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjb25maWcudXNlTmF0aXZlRHJpdmVyIHx8IGZhbHNlO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1EYXRhVHlwZSh2YWx1ZTogbnVtYmVyIHwgc3RyaW5nKTogbnVtYmVyIHwgc3RyaW5nIHtcbiAgLy8gQ2hhbmdlIHRoZSBzdHJpbmcgdHlwZSB0byBudW1iZXIgdHlwZSBzbyB3ZSBjYW4gcmV1c2UgdGhlIHNhbWUgbG9naWMgaW5cbiAgLy8gaU9TIGFuZCBBbmRyb2lkIHBsYXRmb3JtXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICgvZGVnJC8udGVzdCh2YWx1ZSkpIHtcbiAgICBjb25zdCBkZWdyZWVzID0gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMDtcbiAgICBjb25zdCByYWRpYW5zID0gKGRlZ3JlZXMgKiBNYXRoLlBJKSAvIDE4MC4wO1xuICAgIHJldHVybiByYWRpYW5zO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQVBJLFxuICBhZGRXaGl0ZWxpc3RlZFN0eWxlUHJvcCxcbiAgYWRkV2hpdGVsaXN0ZWRUcmFuc2Zvcm1Qcm9wLFxuICBhZGRXaGl0ZWxpc3RlZEludGVycG9sYXRpb25QYXJhbSxcbiAgdmFsaWRhdGVTdHlsZXMsXG4gIHZhbGlkYXRlVHJhbnNmb3JtLFxuICB2YWxpZGF0ZUludGVycG9sYXRpb24sXG4gIGdlbmVyYXRlTmV3Tm9kZVRhZyxcbiAgZ2VuZXJhdGVOZXdBbmltYXRpb25JZCxcbiAgYXNzZXJ0TmF0aXZlQW5pbWF0ZWRNb2R1bGUsXG4gIHNob3VsZFVzZU5hdGl2ZURyaXZlcixcbiAgdHJhbnNmb3JtRGF0YVR5cGUsXG4gIC8vICRGbG93RXhwZWN0ZWRFcnJvciAtIHVuc2FmZSBnZXR0ZXIgbGludCBzdXBwcmVzaW9uXG4gIGdldCBuYXRpdmVFdmVudEVtaXR0ZXIoKTogTmF0aXZlRXZlbnRFbWl0dGVyIHtcbiAgICBpZiAoIW5hdGl2ZUV2ZW50RW1pdHRlcikge1xuICAgICAgbmF0aXZlRXZlbnRFbWl0dGVyID0gbmV3IE5hdGl2ZUV2ZW50RW1pdHRlcihOYXRpdmVBbmltYXRlZE1vZHVsZSk7XG4gICAgfVxuICAgIHJldHVybiBuYXRpdmVFdmVudEVtaXR0ZXI7XG4gIH0sXG59O1xuIl19