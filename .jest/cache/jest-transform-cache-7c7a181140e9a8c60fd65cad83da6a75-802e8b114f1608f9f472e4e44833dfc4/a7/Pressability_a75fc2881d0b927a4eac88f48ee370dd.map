{"version":3,"sources":["Pressability.js"],"names":["Transitions","Object","freeze","NOT_RESPONDER","DELAY","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","ENTER_PRESS_RECT","LEAVE_PRESS_RECT","LONG_PRESS_DETECTED","RESPONDER_INACTIVE_PRESS_IN","RESPONDER_INACTIVE_PRESS_OUT","RESPONDER_ACTIVE_PRESS_IN","RESPONDER_ACTIVE_PRESS_OUT","RESPONDER_ACTIVE_LONG_PRESS_IN","RESPONDER_ACTIVE_LONG_PRESS_OUT","ERROR","isActiveSignal","signal","isActivationSignal","isPressInSignal","isTerminalSignal","DEFAULT_LONG_PRESS_DELAY_MS","DEFAULT_PRESS_DELAY_MS","DEFAULT_PRESS_RECT_OFFSETS","bottom","left","right","top","Pressability","config","_eventHandlers","_hoverInDelayTimeout","_hoverOutDelayTimeout","_isHovered","_longPressDelayTimeout","_pressDelayTimeout","_pressOutDelayTimeout","_responderID","_responderRegion","_touchState","_measureCallback","width","height","pageX","pageY","_config","_cancelHoverInDelayTimeout","_cancelHoverOutDelayTimeout","_cancelLongPressDelayTimeout","_cancelPressDelayTimeout","_cancelPressOutDelayTimeout","_createEventHandlers","focusEventHandlers","onBlur","event","onFocus","responderEventHandlers","onStartShouldSetResponder","onResponderGrant","persist","currentTarget","_receiveSignal","getLongPressDelayMS","getPressDelayMS","pressDelay","getDelayMS","setTimeout","longPressDelay","_handleLongPress","onResponderMove","onPressMove","responderRegion","touch","getTouchFromPressEvent","_touchActivatePosition","deltaX","deltaY","Math","hypot","_isTouchWithinResponderRegion","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","onClick","onPress","mouseEventHandlers","Platform","OS","onMouseEnter","onHoverIn","getHoverInDelayMS","delay","onMouseLeave","onHoverOut","getHoverOutDelayMS","prevState","nextState","_performTransitionSideEffects","isInitialTransition","isActivationTransiton","_measureResponderRegion","onLongPress","isPrevActive","isNextActive","_activate","_deactivate","getTouchSoundDisabled","isPressCanceledByLongPress","_shouldLongPressCancelPress","isTouchSoundDisabled","SoundManager","playTouchSound","onPressIn","onPressOut","getPressOutDelayMS","UIManager","measure","getHitSlop","getPressRectOffset","regionBottom","regionLeft","regionRight","regionTop","hitSlop","rectOffset","onLongPressShouldCancelPress","clearTimeout","getDelay","min","fallback","max","nativeEvent","changedTouches","touches","length"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport {isHoverEnabled} from './HoverState.js';\nimport invariant from 'invariant';\nimport SoundManager from '../Components/Sound/SoundManager.js';\nimport type {EdgeInsetsProp} from '../StyleSheet/EdgeInsetsPropType.js';\nimport type {\n  BlurEvent,\n  FocusEvent,\n  PressEvent,\n  MouseEvent,\n} from '../Types/CoreEventTypes.js';\nimport Platform from '../Utilities/Platform';\nimport UIManager from '../ReactNative/UIManager';\nimport type {HostComponent} from '../Renderer/shims/ReactNativeTypes';\nimport * as React from 'react';\n\nexport type PressabilityConfig = $ReadOnly<{|\n  /**\n   * Returns the amount to extend the `VisualRect` by to create `HitRect`.\n   */\n  getHitSlop?: ?() => ?EdgeInsetsProp,\n\n  /**\n   * Returns the duration to wait after hover in before activation.\n   */\n  getHoverInDelayMS?: ?() => ?number,\n\n  /**\n   * Returns the duration to wait after hover out before deactivation.\n   */\n  getHoverOutDelayMS?: ?() => ?number,\n\n  /**\n   * Returns the duration (in addition to the value from `getPressDelayMS`)\n   * after which a press gesture becomes a long press gesture.\n   */\n  getLongPressDelayMS?: ?() => ?number,\n\n  /**\n   * Returns the duration to wait after press down before activation.\n   */\n  getPressDelayMS?: ?() => ?number,\n\n  /**\n   * Returns the duration to wait after letting up before deactivation.\n   */\n  getPressOutDelayMS?: ?() => ?number,\n\n  /**\n   * Returns the amount to extend the `HitRect` by to create `PressRect`.\n   */\n  getPressRectOffset?: ?() => ?EdgeInsetsProp,\n\n  /**\n   * Returns true to disable playing system sound on touch (Android Only)\n   **/\n  getTouchSoundDisabled?: ?() => ?boolean,\n\n  /**\n   * Called after the element loses focus.\n   */\n  onBlur?: ?(event: BlurEvent) => void,\n\n  /**\n   * Called after the element is focused.\n   */\n  onFocus?: ?(event: FocusEvent) => void,\n\n  /**\n   * Called when the hover is activated to provide visual feedback.\n   */\n  onHoverIn?: ?(event: MouseEvent) => void,\n\n  /**\n   * Called when the hover is deactivated to undo visual feedback.\n   */\n  onHoverOut?: ?(event: MouseEvent) => void,\n\n  /**\n   * Called when a long press gesture has been triggered.\n   */\n  onLongPress?: ?(event: PressEvent) => void,\n\n  /**\n   * Returns whether a long press gesture should cancel the press gesture.\n   * Defaults to true.\n   */\n  onLongPressShouldCancelPress?: ?() => boolean,\n\n  /**\n   * Called when a press gestute has been triggered.\n   */\n  onPress?: ?(event: PressEvent) => void,\n\n  /**\n   * Called when the press is activated to provide visual feedback.\n   */\n  onPressIn?: ?(event: PressEvent) => void,\n\n  /**\n   * Called when the press location moves. (This should rarely be used.)\n   */\n  onPressMove?: ?(event: PressEvent) => void,\n\n  /**\n   * Called when the press is deactivated to undo visual feedback.\n   */\n  onPressOut?: ?(event: PressEvent) => void,\n\n  /**\n   * Returns whether to yield to a lock termination request (e.g. if a native\n   * scroll gesture attempts to steal the responder lock).\n   */\n  onResponderTerminationRequest?: ?() => boolean,\n\n  /**\n   * Returns whether to start a press gesture.\n   */\n  onStartShouldSetResponder?: ?() => boolean,\n|}>;\n\ntype EventHandlers = $ReadOnly<{|\n  onBlur: (event: BlurEvent) => void,\n  onClick: (event: PressEvent) => void,\n  onFocus: (event: FocusEvent) => void,\n  onMouseEnter?: (event: MouseEvent) => void,\n  onMouseLeave?: (event: MouseEvent) => void,\n  onResponderGrant: (event: PressEvent) => void,\n  onResponderMove: (event: PressEvent) => void,\n  onResponderRelease: (event: PressEvent) => void,\n  onResponderTerminate: (event: PressEvent) => void,\n  onResponderTerminationRequest: () => boolean,\n  onStartShouldSetResponder: () => boolean,\n|}>;\n\ntype TouchState =\n  | 'NOT_RESPONDER'\n  | 'RESPONDER_INACTIVE_PRESS_IN'\n  | 'RESPONDER_INACTIVE_PRESS_OUT'\n  | 'RESPONDER_ACTIVE_PRESS_IN'\n  | 'RESPONDER_ACTIVE_PRESS_OUT'\n  | 'RESPONDER_ACTIVE_LONG_PRESS_IN'\n  | 'RESPONDER_ACTIVE_LONG_PRESS_OUT'\n  | 'ERROR';\n\ntype TouchSignal =\n  | 'DELAY'\n  | 'RESPONDER_GRANT'\n  | 'RESPONDER_RELEASE'\n  | 'RESPONDER_TERMINATED'\n  | 'ENTER_PRESS_RECT'\n  | 'LEAVE_PRESS_RECT'\n  | 'LONG_PRESS_DETECTED';\n\nconst Transitions = Object.freeze({\n  NOT_RESPONDER: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',\n    RESPONDER_RELEASE: 'ERROR',\n    RESPONDER_TERMINATED: 'ERROR',\n    ENTER_PRESS_RECT: 'ERROR',\n    LEAVE_PRESS_RECT: 'ERROR',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: 'RESPONDER_ACTIVE_PRESS_IN',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: 'RESPONDER_ACTIVE_PRESS_OUT',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  ERROR: {\n    DELAY: 'NOT_RESPONDER',\n    RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'NOT_RESPONDER',\n    LEAVE_PRESS_RECT: 'NOT_RESPONDER',\n    LONG_PRESS_DETECTED: 'NOT_RESPONDER',\n  },\n});\n\nconst isActiveSignal = signal =>\n  signal === 'RESPONDER_ACTIVE_PRESS_IN' ||\n  signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';\n\nconst isActivationSignal = signal =>\n  signal === 'RESPONDER_ACTIVE_PRESS_OUT' ||\n  signal === 'RESPONDER_ACTIVE_PRESS_IN';\n\nconst isPressInSignal = signal =>\n  signal === 'RESPONDER_INACTIVE_PRESS_IN' ||\n  signal === 'RESPONDER_ACTIVE_PRESS_IN' ||\n  signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';\n\nconst isTerminalSignal = signal =>\n  signal === 'RESPONDER_TERMINATED' || signal === 'RESPONDER_RELEASE';\n\nconst DEFAULT_LONG_PRESS_DELAY_MS = 500;\nconst DEFAULT_PRESS_DELAY_MS = 0;\nconst DEFAULT_PRESS_RECT_OFFSETS = {\n  bottom: 30,\n  left: 20,\n  right: 20,\n  top: 20,\n};\n\n/**\n * Pressability implements press handling capabilities.\n *\n * =========================== Pressability Tutorial ===========================\n *\n * The `Pressability` class helps you create press interactions by analyzing the\n * geometry of elements and observing when another responder (e.g. ScrollView)\n * has stolen the touch lock. It offers hooks for your component to provide\n * interaction feedback to the user:\n *\n * - When a press has activated (e.g. highlight an element)\n * - When a press has deactivated (e.g. un-highlight an element)\n * - When a press sould trigger an action, meaning it activated and deactivated\n *   while within the geometry of the element without the lock being stolen.\n *\n * A high quality interaction isn't as simple as you might think. There should\n * be a slight delay before activation. Moving your finger beyond an element's\n * bounds should trigger deactivation, but moving the same finger back within an\n * element's bounds should trigger reactivation.\n *\n * In order to use `Pressability`, do the following:\n *\n * 1. Instantiate `Pressability` and store it on your component's state.\n *\n *    state = {\n *      pressability: new Pressability({\n *        // ...\n *      }),\n *    };\n *\n * 2. Choose the rendered component who should collect the press events. On that\n *    element, spread `pressability.getEventHandlers()` into its props.\n *\n *    return (\n *      <View {...this.state.pressability.getEventHandlers()} />\n *    );\n *\n * 3. Reset `Pressability` when your component unmounts.\n *\n *    componentWillUnmount() {\n *      this.state.pressability.reset();\n *    }\n *\n * ==================== Pressability Implementation Details ====================\n *\n * `Pressability` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n * # Geometry\n *\n *  ┌────────────────────────┐\n *  │  ┌──────────────────┐  │ - Presses start anywhere within `HitRect`, which\n *  │  │  ┌────────────┐  │  │   is expanded via the prop `getHitSlop`.\n *  │  │  │ VisualRect │  │  │\n *  │  │  └────────────┘  │  │ - When pressed down for sufficient amount of time\n *  │  │    HitRect       │  │   before letting up, `VisualRect` activates for\n *  │  └──────────────────┘  │   as long as the press stays within `PressRect`.\n *  │       PressRect    o   │\n *  └────────────────────│───┘\n *          Out Region   └────── `PressRect`, which is expanded via the prop\n *                               `getPressRectOffset`, allows presses to move\n *                               beyond `HitRect` while maintaining activation\n *                               and being eligible for a \"press\".\n *\n * # State Machine\n *\n * ┌───────────────┐ ◀──── RESPONDER_RELEASE\n * │ NOT_RESPONDER │\n * └───┬───────────┘ ◀──── RESPONDER_TERMINATED\n *     │\n *     │ RESPONDER_GRANT (HitRect)\n *     │\n *     ▼\n * ┌─────────────────────┐          ┌───────────────────┐              ┌───────────────────┐\n * │ RESPONDER_INACTIVE_ │  DELAY   │ RESPONDER_ACTIVE_ │  T + DELAY   │ RESPONDER_ACTIVE_ │\n * │ PRESS_IN            ├────────▶ │ PRESS_IN          ├────────────▶ │ LONG_PRESS_IN     │\n * └─┬───────────────────┘          └─┬─────────────────┘              └─┬─────────────────┘\n *   │           ▲                    │           ▲                      │           ▲\n *   │LEAVE_     │                    │LEAVE_     │                      │LEAVE_     │\n *   │PRESS_RECT │ENTER_              │PRESS_RECT │ENTER_                │PRESS_RECT │ENTER_\n *   │           │PRESS_RECT          │           │PRESS_RECT            │           │PRESS_RECT\n *   ▼           │                    ▼           │                      ▼           │\n * ┌─────────────┴───────┐          ┌─────────────┴─────┐              ┌─────────────┴─────┐\n * │ RESPONDER_INACTIVE_ │  DELAY   │ RESPONDER_ACTIVE_ │              │ RESPONDER_ACTIVE_ │\n * │ PRESS_OUT           ├────────▶ │ PRESS_OUT         │              │ LONG_PRESS_OUT    │\n * └─────────────────────┘          └───────────────────┘              └───────────────────┘\n *\n * T + DELAY => LONG_PRESS_DELAY + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the invocation of `onPress` and `onLongPress` that occur when a\n * responder is release while in the \"press in\" states.\n */\nexport default class Pressability {\n  _config: PressabilityConfig;\n  _eventHandlers: ?EventHandlers = null;\n  _hoverInDelayTimeout: ?TimeoutID = null;\n  _hoverOutDelayTimeout: ?TimeoutID = null;\n  _isHovered: boolean = false;\n  _longPressDelayTimeout: ?TimeoutID = null;\n  _pressDelayTimeout: ?TimeoutID = null;\n  _pressOutDelayTimeout: ?TimeoutID = null;\n  _responderID: ?number | React.ElementRef<HostComponent<mixed>> = null;\n  _responderRegion: ?$ReadOnly<{|\n    bottom: number,\n    left: number,\n    right: number,\n    top: number,\n  |}> = null;\n  _touchActivatePosition: ?$ReadOnly<{|\n    pageX: number,\n    pageY: number,\n  |}>;\n  _touchState: TouchState = 'NOT_RESPONDER';\n\n  constructor(config: PressabilityConfig) {\n    this._config = config;\n  }\n\n  /**\n   * Resets any pending timers. This should be called on unmount.\n   */\n  reset(): void {\n    this._cancelHoverInDelayTimeout();\n    this._cancelHoverOutDelayTimeout();\n    this._cancelLongPressDelayTimeout();\n    this._cancelPressDelayTimeout();\n    this._cancelPressOutDelayTimeout();\n  }\n\n  /**\n   * Returns a set of props to spread into the interactive element.\n   */\n  getEventHandlers(): EventHandlers {\n    if (this._eventHandlers == null) {\n      this._eventHandlers = this._createEventHandlers();\n    }\n    return this._eventHandlers;\n  }\n\n  _createEventHandlers(): EventHandlers {\n    const focusEventHandlers = {\n      onBlur: (event: BlurEvent): void => {\n        const {onBlur} = this._config;\n        if (onBlur != null) {\n          onBlur(event);\n        }\n      },\n      onFocus: (event: FocusEvent): void => {\n        const {onFocus} = this._config;\n        if (onFocus != null) {\n          onFocus(event);\n        }\n      },\n    };\n\n    const responderEventHandlers = {\n      onStartShouldSetResponder: () => {\n        const {onStartShouldSetResponder} = this._config;\n        return onStartShouldSetResponder == null\n          ? true\n          : onStartShouldSetResponder();\n      },\n\n      onResponderGrant: (event: PressEvent): void => {\n        event.persist();\n\n        this._cancelPressOutDelayTimeout();\n\n        this._responderID = event.currentTarget;\n        this._touchState = 'NOT_RESPONDER';\n        this._receiveSignal('RESPONDER_GRANT', event);\n\n        const {getLongPressDelayMS, getPressDelayMS} = this._config;\n\n        const pressDelay = getDelayMS(\n          getPressDelayMS,\n          0,\n          DEFAULT_PRESS_DELAY_MS,\n        );\n        if (pressDelay > 0) {\n          this._pressDelayTimeout = setTimeout(() => {\n            this._receiveSignal('DELAY', event);\n          }, pressDelay);\n        } else {\n          this._receiveSignal('DELAY', event);\n        }\n\n        const longPressDelay = getDelayMS(\n          getLongPressDelayMS,\n          10,\n          DEFAULT_LONG_PRESS_DELAY_MS,\n        );\n        this._longPressDelayTimeout = setTimeout(() => {\n          this._handleLongPress(event);\n        }, longPressDelay + pressDelay);\n      },\n\n      onResponderMove: (event: PressEvent): void => {\n        if (this._config.onPressMove != null) {\n          this._config.onPressMove(event);\n        }\n\n        // Region may not have finished being measured, yet.\n        const responderRegion = this._responderRegion;\n        if (responderRegion == null) {\n          return;\n        }\n\n        const touch = getTouchFromPressEvent(event);\n        if (touch == null) {\n          this._cancelLongPressDelayTimeout();\n          this._receiveSignal('LEAVE_PRESS_RECT', event);\n          return;\n        }\n\n        if (this._touchActivatePosition != null) {\n          const deltaX = this._touchActivatePosition.pageX - touch.pageX;\n          const deltaY = this._touchActivatePosition.pageY - touch.pageY;\n          if (Math.hypot(deltaX, deltaY) > 10) {\n            this._cancelLongPressDelayTimeout();\n          }\n        }\n\n        if (this._isTouchWithinResponderRegion(touch, responderRegion)) {\n          this._receiveSignal('ENTER_PRESS_RECT', event);\n        } else {\n          this._cancelLongPressDelayTimeout();\n          this._receiveSignal('LEAVE_PRESS_RECT', event);\n        }\n      },\n\n      onResponderRelease: (event: PressEvent): void => {\n        this._receiveSignal('RESPONDER_RELEASE', event);\n      },\n\n      onResponderTerminate: (event: PressEvent): void => {\n        this._receiveSignal('RESPONDER_TERMINATED', event);\n      },\n\n      onResponderTerminationRequest: (): boolean => {\n        const {onResponderTerminationRequest} = this._config;\n        return onResponderTerminationRequest == null\n          ? true\n          : onResponderTerminationRequest();\n      },\n\n      onClick: (event: PressEvent) => {\n        const {onPress} = this._config;\n        if (onPress != null) {\n          onPress(event);\n        }\n      },\n    };\n\n    const mouseEventHandlers =\n      Platform.OS === 'ios' || Platform.OS === 'android'\n        ? null\n        : {\n            onMouseEnter: (event: MouseEvent): void => {\n              if (isHoverEnabled()) {\n                this._isHovered = true;\n                this._cancelHoverOutDelayTimeout();\n                const {onHoverIn, getHoverInDelayMS} = this._config;\n                if (onHoverIn != null) {\n                  const delay = getDelayMS(getHoverInDelayMS);\n                  if (delay > 0) {\n                    this._hoverInDelayTimeout = setTimeout(() => {\n                      onHoverIn(event);\n                    }, delay);\n                  } else {\n                    onHoverIn(event);\n                  }\n                }\n              }\n            },\n\n            onMouseLeave: (event: MouseEvent): void => {\n              if (this._isHovered) {\n                this._isHovered = false;\n                this._cancelHoverInDelayTimeout();\n                const {onHoverOut, getHoverOutDelayMS} = this._config;\n                if (onHoverOut != null) {\n                  const delay = getDelayMS(getHoverOutDelayMS);\n                  if (delay > 0) {\n                    this._hoverInDelayTimeout = setTimeout(() => {\n                      onHoverOut(event);\n                    }, delay);\n                  } else {\n                    onHoverOut(event);\n                  }\n                }\n              }\n            },\n          };\n\n    return {\n      ...focusEventHandlers,\n      ...responderEventHandlers,\n      ...mouseEventHandlers,\n    };\n  }\n\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   */\n  _receiveSignal(signal: TouchSignal, event: PressEvent): void {\n    const prevState = this._touchState;\n    const nextState = Transitions[prevState]?.[signal];\n    if (this._responderID == null && signal === 'RESPONDER_RELEASE') {\n      return;\n    }\n    invariant(\n      nextState != null && nextState !== 'ERROR',\n      'Pressability: Invalid signal `%s` for state `%s` on responder: %s',\n      signal,\n      prevState,\n      typeof this._responderID === 'number'\n        ? this._responderID\n        : '<<host component>>',\n    );\n    if (prevState !== nextState) {\n      this._performTransitionSideEffects(prevState, nextState, signal, event);\n      this._touchState = nextState;\n    }\n  }\n\n  /**\n   * Performs a transition between touchable states and identify any activations\n   * or deactivations (and callback invocations).\n   */\n  _performTransitionSideEffects(\n    prevState: TouchState,\n    nextState: TouchState,\n    signal: TouchSignal,\n    event: PressEvent,\n  ): void {\n    if (isTerminalSignal(signal)) {\n      this._touchActivatePosition = null;\n      this._cancelLongPressDelayTimeout();\n    }\n\n    const isInitialTransition =\n      prevState === 'NOT_RESPONDER' &&\n      nextState === 'RESPONDER_INACTIVE_PRESS_IN';\n\n    const isActivationTransiton =\n      !isActivationSignal(prevState) && isActivationSignal(nextState);\n\n    if (isInitialTransition || isActivationTransiton) {\n      this._measureResponderRegion();\n    }\n\n    if (isPressInSignal(prevState) && signal === 'LONG_PRESS_DETECTED') {\n      const {onLongPress} = this._config;\n      if (onLongPress != null) {\n        onLongPress(event);\n      }\n    }\n\n    const isPrevActive = isActiveSignal(prevState);\n    const isNextActive = isActiveSignal(nextState);\n\n    if (!isPrevActive && isNextActive) {\n      this._activate(event);\n    } else if (isPrevActive && !isNextActive) {\n      this._deactivate(event);\n    }\n\n    if (isPressInSignal(prevState) && signal === 'RESPONDER_RELEASE') {\n      const {onLongPress, onPress, getTouchSoundDisabled} = this._config;\n      if (onPress != null) {\n        const isPressCanceledByLongPress =\n          onLongPress != null &&\n          prevState === 'RESPONDER_ACTIVE_LONG_PRESS_IN' &&\n          this._shouldLongPressCancelPress();\n        if (!isPressCanceledByLongPress) {\n          // If we never activated (due to delays), activate and deactivate now.\n          if (!isNextActive && !isPrevActive) {\n            this._activate(event);\n            this._deactivate(event);\n          }\n          const isTouchSoundDisabled =\n            (getTouchSoundDisabled == null ? null : getTouchSoundDisabled()) ??\n            false;\n          if (Platform.OS === 'android' && !isTouchSoundDisabled) {\n            SoundManager.playTouchSound();\n          }\n          onPress(event);\n        }\n      }\n    }\n\n    this._cancelPressDelayTimeout();\n  }\n\n  _activate(event: PressEvent): void {\n    const {onPressIn} = this._config;\n    const touch = getTouchFromPressEvent(event);\n    this._touchActivatePosition = {\n      pageX: touch.pageX,\n      pageY: touch.pageY,\n    };\n    if (onPressIn != null) {\n      onPressIn(event);\n    }\n  }\n\n  _deactivate(event: PressEvent): void {\n    const {onPressOut, getPressOutDelayMS} = this._config;\n    if (onPressOut != null) {\n      const delay = getDelayMS(getPressOutDelayMS);\n      if (delay > 0) {\n        this._pressOutDelayTimeout = setTimeout(() => {\n          onPressOut(event);\n        }, delay);\n      } else {\n        onPressOut(event);\n      }\n    }\n  }\n\n  _measureResponderRegion(): void {\n    if (this._responderID == null) {\n      return;\n    }\n\n    if (typeof this._responderID === 'number') {\n      UIManager.measure(this._responderID, this._measureCallback);\n    } else {\n      this._responderID.measure(this._measureCallback);\n    }\n  }\n\n  _measureCallback = (left, top, width, height, pageX, pageY) => {\n    if (!left && !top && !width && !height && !pageX && !pageY) {\n      return;\n    }\n    this._responderRegion = {\n      bottom: pageY + height,\n      left: pageX,\n      right: pageX + width,\n      top: pageY,\n    };\n  };\n\n  _isTouchWithinResponderRegion(\n    touch: $PropertyType<PressEvent, 'nativeEvent'>,\n    responderRegion: $ReadOnly<{|\n      bottom: number,\n      left: number,\n      right: number,\n      top: number,\n    |}>,\n  ): boolean {\n    const {getHitSlop, getPressRectOffset} = this._config;\n\n    let regionBottom = responderRegion.bottom;\n    let regionLeft = responderRegion.left;\n    let regionRight = responderRegion.right;\n    let regionTop = responderRegion.top;\n\n    const hitSlop = getHitSlop == null ? null : getHitSlop();\n    if (hitSlop != null) {\n      if (hitSlop.bottom != null) {\n        regionBottom += hitSlop.bottom;\n      }\n      if (hitSlop.left != null) {\n        regionLeft -= hitSlop.left;\n      }\n      if (hitSlop.right != null) {\n        regionRight += hitSlop.right;\n      }\n      if (hitSlop.top != null) {\n        regionTop -= hitSlop.top;\n      }\n    }\n\n    const rectOffset = getPressRectOffset == null ? null : getPressRectOffset();\n    regionBottom +=\n      rectOffset == null || rectOffset.bottom == null\n        ? DEFAULT_PRESS_RECT_OFFSETS.bottom\n        : rectOffset.bottom;\n    regionLeft -=\n      rectOffset == null || rectOffset.left == null\n        ? DEFAULT_PRESS_RECT_OFFSETS.left\n        : rectOffset.left;\n    regionRight +=\n      rectOffset == null || rectOffset.right == null\n        ? DEFAULT_PRESS_RECT_OFFSETS.right\n        : rectOffset.right;\n    regionTop -=\n      rectOffset == null || rectOffset.top == null\n        ? DEFAULT_PRESS_RECT_OFFSETS.top\n        : rectOffset.top;\n\n    return (\n      touch.pageX > regionLeft &&\n      touch.pageX < regionRight &&\n      touch.pageY > regionTop &&\n      touch.pageY < regionBottom\n    );\n  }\n\n  _handleLongPress(event: PressEvent): void {\n    if (\n      this._touchState === 'RESPONDER_ACTIVE_PRESS_IN' ||\n      this._touchState === 'RESPONDER_ACTIVE_LONG_PRESS_IN'\n    ) {\n      this._receiveSignal('LONG_PRESS_DETECTED', event);\n    }\n  }\n\n  _shouldLongPressCancelPress(): boolean {\n    return (\n      this._config.onLongPressShouldCancelPress == null ||\n      this._config.onLongPressShouldCancelPress()\n    );\n  }\n\n  _cancelHoverInDelayTimeout(): void {\n    if (this._hoverInDelayTimeout != null) {\n      clearTimeout(this._hoverInDelayTimeout);\n      this._hoverInDelayTimeout = null;\n    }\n  }\n\n  _cancelHoverOutDelayTimeout(): void {\n    if (this._hoverOutDelayTimeout != null) {\n      clearTimeout(this._hoverOutDelayTimeout);\n      this._hoverOutDelayTimeout = null;\n    }\n  }\n\n  _cancelLongPressDelayTimeout(): void {\n    if (this._longPressDelayTimeout != null) {\n      clearTimeout(this._longPressDelayTimeout);\n      this._longPressDelayTimeout = null;\n    }\n  }\n\n  _cancelPressDelayTimeout(): void {\n    if (this._pressDelayTimeout != null) {\n      clearTimeout(this._pressDelayTimeout);\n      this._pressDelayTimeout = null;\n    }\n  }\n\n  _cancelPressOutDelayTimeout(): void {\n    if (this._pressOutDelayTimeout != null) {\n      clearTimeout(this._pressOutDelayTimeout);\n      this._pressOutDelayTimeout = null;\n    }\n  }\n}\n\nconst getDelayMS = (getDelay: ?() => ?number, min = 0, fallback = 0) => {\n  return Math.max(min, (getDelay == null ? null : getDelay()) ?? fallback);\n};\n\nconst getTouchFromPressEvent = (event: PressEvent) => {\n  const {changedTouches, touches} = event.nativeEvent;\n\n  if (touches != null && touches.length > 0) {\n    return touches[0];\n  }\n  if (changedTouches != null && changedTouches.length > 0) {\n    return changedTouches[0];\n  }\n  return event.nativeEvent;\n};\n"]}