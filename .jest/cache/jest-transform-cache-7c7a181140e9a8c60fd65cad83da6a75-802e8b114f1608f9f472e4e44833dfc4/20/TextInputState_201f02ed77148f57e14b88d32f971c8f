43e6939a4a2650eeef7ede89dccda596
'use strict';

var Platform = require('../../Utilities/Platform');

var UIManager = require('../../ReactNative/UIManager');

var currentlyFocusedID = null;
var inputs = new Set();

function currentlyFocusedField() {
  return currentlyFocusedID;
}

function focusField(textFieldID) {
  if (currentlyFocusedID !== textFieldID && textFieldID != null) {
    currentlyFocusedID = textFieldID;
  }
}

function blurField(textFieldID) {
  if (currentlyFocusedID === textFieldID && textFieldID != null) {
    currentlyFocusedID = null;
  }
}

function focusTextInput(textFieldID) {
  if (currentlyFocusedID !== textFieldID && textFieldID != null) {
    focusField(textFieldID);

    if (Platform.OS === 'ios') {
      UIManager.focus(textFieldID);
    } else if (Platform.OS === 'android') {
      UIManager.dispatchViewManagerCommand(textFieldID, UIManager.getViewManagerConfig('AndroidTextInput').Commands.focusTextInput, null);
    }
  }
}

function blurTextInput(textFieldID) {
  if (currentlyFocusedID === textFieldID && textFieldID != null) {
    blurField(textFieldID);

    if (Platform.OS === 'ios') {
      UIManager.blur(textFieldID);
    } else if (Platform.OS === 'android') {
      UIManager.dispatchViewManagerCommand(textFieldID, UIManager.getViewManagerConfig('AndroidTextInput').Commands.blurTextInput, null);
    }
  }
}

function registerInput(textFieldID) {
  inputs.add(textFieldID);
}

function unregisterInput(textFieldID) {
  inputs.delete(textFieldID);
}

function isTextInput(textFieldID) {
  return inputs.has(textFieldID);
}

module.exports = {
  currentlyFocusedField: currentlyFocusedField,
  focusField: focusField,
  blurField: blurField,
  focusTextInput: focusTextInput,
  blurTextInput: blurTextInput,
  registerInput: registerInput,
  unregisterInput: unregisterInput,
  isTextInput: isTextInput
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRJbnB1dFN0YXRlLmpzIl0sIm5hbWVzIjpbIlBsYXRmb3JtIiwicmVxdWlyZSIsIlVJTWFuYWdlciIsImN1cnJlbnRseUZvY3VzZWRJRCIsImlucHV0cyIsIlNldCIsImN1cnJlbnRseUZvY3VzZWRGaWVsZCIsImZvY3VzRmllbGQiLCJ0ZXh0RmllbGRJRCIsImJsdXJGaWVsZCIsImZvY3VzVGV4dElucHV0IiwiT1MiLCJmb2N1cyIsImRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kIiwiZ2V0Vmlld01hbmFnZXJDb25maWciLCJDb21tYW5kcyIsImJsdXJUZXh0SW5wdXQiLCJibHVyIiwicmVnaXN0ZXJJbnB1dCIsImFkZCIsInVucmVnaXN0ZXJJbnB1dCIsImRlbGV0ZSIsImlzVGV4dElucHV0IiwiaGFzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBY0E7O0FBRUEsSUFBTUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsMEJBQUQsQ0FBeEI7O0FBQ0EsSUFBTUMsU0FBUyxHQUFHRCxPQUFPLENBQUMsNkJBQUQsQ0FBekI7O0FBRUEsSUFBSUUsa0JBQTJCLEdBQUcsSUFBbEM7QUFDQSxJQUFNQyxNQUFNLEdBQUcsSUFBSUMsR0FBSixFQUFmOztBQU1BLFNBQVNDLHFCQUFULEdBQTBDO0FBQ3hDLFNBQU9ILGtCQUFQO0FBQ0Q7O0FBRUQsU0FBU0ksVUFBVCxDQUFvQkMsV0FBcEIsRUFBZ0Q7QUFDOUMsTUFBSUwsa0JBQWtCLEtBQUtLLFdBQXZCLElBQXNDQSxXQUFXLElBQUksSUFBekQsRUFBK0Q7QUFDN0RMLElBQUFBLGtCQUFrQixHQUFHSyxXQUFyQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU0MsU0FBVCxDQUFtQkQsV0FBbkIsRUFBeUM7QUFDdkMsTUFBSUwsa0JBQWtCLEtBQUtLLFdBQXZCLElBQXNDQSxXQUFXLElBQUksSUFBekQsRUFBK0Q7QUFDN0RMLElBQUFBLGtCQUFrQixHQUFHLElBQXJCO0FBQ0Q7QUFDRjs7QUFPRCxTQUFTTyxjQUFULENBQXdCRixXQUF4QixFQUE4QztBQUM1QyxNQUFJTCxrQkFBa0IsS0FBS0ssV0FBdkIsSUFBc0NBLFdBQVcsSUFBSSxJQUF6RCxFQUErRDtBQUM3REQsSUFBQUEsVUFBVSxDQUFDQyxXQUFELENBQVY7O0FBQ0EsUUFBSVIsUUFBUSxDQUFDVyxFQUFULEtBQWdCLEtBQXBCLEVBQTJCO0FBQ3pCVCxNQUFBQSxTQUFTLENBQUNVLEtBQVYsQ0FBZ0JKLFdBQWhCO0FBQ0QsS0FGRCxNQUVPLElBQUlSLFFBQVEsQ0FBQ1csRUFBVCxLQUFnQixTQUFwQixFQUErQjtBQUNwQ1QsTUFBQUEsU0FBUyxDQUFDVywwQkFBVixDQUNFTCxXQURGLEVBRUVOLFNBQVMsQ0FBQ1ksb0JBQVYsQ0FBK0Isa0JBQS9CLEVBQW1EQyxRQUFuRCxDQUNHTCxjQUhMLEVBSUUsSUFKRjtBQU1EO0FBQ0Y7QUFDRjs7QUFPRCxTQUFTTSxhQUFULENBQXVCUixXQUF2QixFQUE2QztBQUMzQyxNQUFJTCxrQkFBa0IsS0FBS0ssV0FBdkIsSUFBc0NBLFdBQVcsSUFBSSxJQUF6RCxFQUErRDtBQUM3REMsSUFBQUEsU0FBUyxDQUFDRCxXQUFELENBQVQ7O0FBQ0EsUUFBSVIsUUFBUSxDQUFDVyxFQUFULEtBQWdCLEtBQXBCLEVBQTJCO0FBQ3pCVCxNQUFBQSxTQUFTLENBQUNlLElBQVYsQ0FBZVQsV0FBZjtBQUNELEtBRkQsTUFFTyxJQUFJUixRQUFRLENBQUNXLEVBQVQsS0FBZ0IsU0FBcEIsRUFBK0I7QUFDcENULE1BQUFBLFNBQVMsQ0FBQ1csMEJBQVYsQ0FDRUwsV0FERixFQUVFTixTQUFTLENBQUNZLG9CQUFWLENBQStCLGtCQUEvQixFQUFtREMsUUFBbkQsQ0FDR0MsYUFITCxFQUlFLElBSkY7QUFNRDtBQUNGO0FBQ0Y7O0FBRUQsU0FBU0UsYUFBVCxDQUF1QlYsV0FBdkIsRUFBNEM7QUFDMUNKLEVBQUFBLE1BQU0sQ0FBQ2UsR0FBUCxDQUFXWCxXQUFYO0FBQ0Q7O0FBRUQsU0FBU1ksZUFBVCxDQUF5QlosV0FBekIsRUFBOEM7QUFDNUNKLEVBQUFBLE1BQU0sQ0FBQ2lCLE1BQVAsQ0FBY2IsV0FBZDtBQUNEOztBQUVELFNBQVNjLFdBQVQsQ0FBcUJkLFdBQXJCLEVBQW1EO0FBQ2pELFNBQU9KLE1BQU0sQ0FBQ21CLEdBQVAsQ0FBV2YsV0FBWCxDQUFQO0FBQ0Q7O0FBRURnQixNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZm5CLEVBQUFBLHFCQUFxQixFQUFyQkEscUJBRGU7QUFFZkMsRUFBQUEsVUFBVSxFQUFWQSxVQUZlO0FBR2ZFLEVBQUFBLFNBQVMsRUFBVEEsU0FIZTtBQUlmQyxFQUFBQSxjQUFjLEVBQWRBLGNBSmU7QUFLZk0sRUFBQUEsYUFBYSxFQUFiQSxhQUxlO0FBTWZFLEVBQUFBLGFBQWEsRUFBYkEsYUFOZTtBQU9mRSxFQUFBQSxlQUFlLEVBQWZBLGVBUGU7QUFRZkUsRUFBQUEsV0FBVyxFQUFYQTtBQVJlLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4vLyBUaGlzIGNsYXNzIGlzIHJlc3BvbnNpYmxlIGZvciBjb29yZGluYXRpbmcgdGhlIFwiZm9jdXNlZFwiIHN0YXRlIGZvclxuLy8gVGV4dElucHV0cy4gQWxsIGNhbGxzIHJlbGF0aW5nIHRvIHRoZSBrZXlib2FyZCBzaG91bGQgYmUgZnVubmVsZWRcbi8vIHRocm91Z2ggaGVyZS5cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBQbGF0Zm9ybSA9IHJlcXVpcmUoJy4uLy4uL1V0aWxpdGllcy9QbGF0Zm9ybScpO1xuY29uc3QgVUlNYW5hZ2VyID0gcmVxdWlyZSgnLi4vLi4vUmVhY3ROYXRpdmUvVUlNYW5hZ2VyJyk7XG5cbmxldCBjdXJyZW50bHlGb2N1c2VkSUQ6ID9udW1iZXIgPSBudWxsO1xuY29uc3QgaW5wdXRzID0gbmV3IFNldCgpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIElEIG9mIHRoZSBjdXJyZW50bHkgZm9jdXNlZCB0ZXh0IGZpZWxkLCBpZiBvbmUgZXhpc3RzXG4gKiBJZiBubyB0ZXh0IGZpZWxkIGlzIGZvY3VzZWQgaXQgcmV0dXJucyBudWxsXG4gKi9cbmZ1bmN0aW9uIGN1cnJlbnRseUZvY3VzZWRGaWVsZCgpOiA/bnVtYmVyIHtcbiAgcmV0dXJuIGN1cnJlbnRseUZvY3VzZWRJRDtcbn1cblxuZnVuY3Rpb24gZm9jdXNGaWVsZCh0ZXh0RmllbGRJRDogP251bWJlcik6IHZvaWQge1xuICBpZiAoY3VycmVudGx5Rm9jdXNlZElEICE9PSB0ZXh0RmllbGRJRCAmJiB0ZXh0RmllbGRJRCAhPSBudWxsKSB7XG4gICAgY3VycmVudGx5Rm9jdXNlZElEID0gdGV4dEZpZWxkSUQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmx1ckZpZWxkKHRleHRGaWVsZElEOiA/bnVtYmVyKSB7XG4gIGlmIChjdXJyZW50bHlGb2N1c2VkSUQgPT09IHRleHRGaWVsZElEICYmIHRleHRGaWVsZElEICE9IG51bGwpIHtcbiAgICBjdXJyZW50bHlGb2N1c2VkSUQgPSBudWxsO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IFRleHRJbnB1dElEIGlkIG9mIHRoZSB0ZXh0IGZpZWxkIHRvIGZvY3VzXG4gKiBGb2N1c2VzIHRoZSBzcGVjaWZpZWQgdGV4dCBmaWVsZFxuICogbm9vcCBpZiB0aGUgdGV4dCBmaWVsZCB3YXMgYWxyZWFkeSBmb2N1c2VkXG4gKi9cbmZ1bmN0aW9uIGZvY3VzVGV4dElucHV0KHRleHRGaWVsZElEOiA/bnVtYmVyKSB7XG4gIGlmIChjdXJyZW50bHlGb2N1c2VkSUQgIT09IHRleHRGaWVsZElEICYmIHRleHRGaWVsZElEICE9IG51bGwpIHtcbiAgICBmb2N1c0ZpZWxkKHRleHRGaWVsZElEKTtcbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdpb3MnKSB7XG4gICAgICBVSU1hbmFnZXIuZm9jdXModGV4dEZpZWxkSUQpO1xuICAgIH0gZWxzZSBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgVUlNYW5hZ2VyLmRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kKFxuICAgICAgICB0ZXh0RmllbGRJRCxcbiAgICAgICAgVUlNYW5hZ2VyLmdldFZpZXdNYW5hZ2VyQ29uZmlnKCdBbmRyb2lkVGV4dElucHV0JykuQ29tbWFuZHNcbiAgICAgICAgICAuZm9jdXNUZXh0SW5wdXQsXG4gICAgICAgIG51bGwsXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0ZXh0RmllbGRJRCBpZCBvZiB0aGUgdGV4dCBmaWVsZCB0byB1bmZvY3VzXG4gKiBVbmZvY3VzZXMgdGhlIHNwZWNpZmllZCB0ZXh0IGZpZWxkXG4gKiBub29wIGlmIGl0IHdhc24ndCBmb2N1c2VkXG4gKi9cbmZ1bmN0aW9uIGJsdXJUZXh0SW5wdXQodGV4dEZpZWxkSUQ6ID9udW1iZXIpIHtcbiAgaWYgKGN1cnJlbnRseUZvY3VzZWRJRCA9PT0gdGV4dEZpZWxkSUQgJiYgdGV4dEZpZWxkSUQgIT0gbnVsbCkge1xuICAgIGJsdXJGaWVsZCh0ZXh0RmllbGRJRCk7XG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnaW9zJykge1xuICAgICAgVUlNYW5hZ2VyLmJsdXIodGV4dEZpZWxkSUQpO1xuICAgIH0gZWxzZSBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgVUlNYW5hZ2VyLmRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kKFxuICAgICAgICB0ZXh0RmllbGRJRCxcbiAgICAgICAgVUlNYW5hZ2VyLmdldFZpZXdNYW5hZ2VyQ29uZmlnKCdBbmRyb2lkVGV4dElucHV0JykuQ29tbWFuZHNcbiAgICAgICAgICAuYmx1clRleHRJbnB1dCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVySW5wdXQodGV4dEZpZWxkSUQ6IG51bWJlcikge1xuICBpbnB1dHMuYWRkKHRleHRGaWVsZElEKTtcbn1cblxuZnVuY3Rpb24gdW5yZWdpc3RlcklucHV0KHRleHRGaWVsZElEOiBudW1iZXIpIHtcbiAgaW5wdXRzLmRlbGV0ZSh0ZXh0RmllbGRJRCk7XG59XG5cbmZ1bmN0aW9uIGlzVGV4dElucHV0KHRleHRGaWVsZElEOiBudW1iZXIpOiBib29sZWFuIHtcbiAgcmV0dXJuIGlucHV0cy5oYXModGV4dEZpZWxkSUQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3VycmVudGx5Rm9jdXNlZEZpZWxkLFxuICBmb2N1c0ZpZWxkLFxuICBibHVyRmllbGQsXG4gIGZvY3VzVGV4dElucHV0LFxuICBibHVyVGV4dElucHV0LFxuICByZWdpc3RlcklucHV0LFxuICB1bnJlZ2lzdGVySW5wdXQsXG4gIGlzVGV4dElucHV0LFxufTtcbiJdfQ==