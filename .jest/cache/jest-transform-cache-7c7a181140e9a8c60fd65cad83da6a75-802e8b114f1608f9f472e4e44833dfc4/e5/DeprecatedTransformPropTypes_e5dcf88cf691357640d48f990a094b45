397be0685c9d6c7203a3e8254b95f27e
'use strict';

var ReactPropTypes = require('prop-types');

var deprecatedPropType = require('../Utilities/deprecatedPropType');

var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The transformMatrix style property is deprecated. ' + 'Use `transform: [{ matrix: ... }]` instead.');
  }
};

var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The decomposedMatrix style property is deprecated. ' + 'Use `transform: [...]` instead.');
  }
};

var DeprecatedTransformPropTypes = {
  transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({
    perspective: ReactPropTypes.number
  }), ReactPropTypes.shape({
    rotate: ReactPropTypes.string
  }), ReactPropTypes.shape({
    rotateX: ReactPropTypes.string
  }), ReactPropTypes.shape({
    rotateY: ReactPropTypes.string
  }), ReactPropTypes.shape({
    rotateZ: ReactPropTypes.string
  }), ReactPropTypes.shape({
    scale: ReactPropTypes.number
  }), ReactPropTypes.shape({
    scaleX: ReactPropTypes.number
  }), ReactPropTypes.shape({
    scaleY: ReactPropTypes.number
  }), ReactPropTypes.shape({
    translateX: ReactPropTypes.number
  }), ReactPropTypes.shape({
    translateY: ReactPropTypes.number
  }), ReactPropTypes.shape({
    skewX: ReactPropTypes.string
  }), ReactPropTypes.shape({
    skewY: ReactPropTypes.string
  })])),
  transformMatrix: TransformMatrixPropType,
  decomposedMatrix: DecomposedMatrixPropType,
  scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
};
module.exports = DeprecatedTransformPropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRlcHJlY2F0ZWRUcmFuc2Zvcm1Qcm9wVHlwZXMuanMiXSwibmFtZXMiOlsiUmVhY3RQcm9wVHlwZXMiLCJyZXF1aXJlIiwiZGVwcmVjYXRlZFByb3BUeXBlIiwiVHJhbnNmb3JtTWF0cml4UHJvcFR5cGUiLCJwcm9wcyIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsIkVycm9yIiwiRGVjb21wb3NlZE1hdHJpeFByb3BUeXBlIiwiRGVwcmVjYXRlZFRyYW5zZm9ybVByb3BUeXBlcyIsInRyYW5zZm9ybSIsImFycmF5T2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsInBlcnNwZWN0aXZlIiwibnVtYmVyIiwicm90YXRlIiwic3RyaW5nIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwic2NhbGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInNrZXdYIiwic2tld1kiLCJ0cmFuc2Zvcm1NYXRyaXgiLCJkZWNvbXBvc2VkTWF0cml4Iiwicm90YXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7QUFFQSxJQUFNQSxjQUFjLEdBQUdDLE9BQU8sQ0FBQyxZQUFELENBQTlCOztBQUVBLElBQU1DLGtCQUFrQixHQUFHRCxPQUFPLENBQUMsaUNBQUQsQ0FBbEM7O0FBRUEsSUFBTUUsdUJBQXVCLEdBQUcsU0FBMUJBLHVCQUEwQixDQUM5QkMsS0FEOEIsRUFFOUJDLFFBRjhCLEVBRzlCQyxhQUg4QixFQUl0QjtBQUNSLE1BQUlGLEtBQUssQ0FBQ0MsUUFBRCxDQUFULEVBQXFCO0FBQ25CLFdBQU8sSUFBSUUsS0FBSixDQUNMLHVEQUNFLDZDQUZHLENBQVA7QUFJRDtBQUNGLENBWEQ7O0FBYUEsSUFBTUMsd0JBQXdCLEdBQUcsU0FBM0JBLHdCQUEyQixDQUMvQkosS0FEK0IsRUFFL0JDLFFBRitCLEVBRy9CQyxhQUgrQixFQUl2QjtBQUNSLE1BQUlGLEtBQUssQ0FBQ0MsUUFBRCxDQUFULEVBQXFCO0FBQ25CLFdBQU8sSUFBSUUsS0FBSixDQUNMLHdEQUNFLGlDQUZHLENBQVA7QUFJRDtBQUNGLENBWEQ7O0FBYUEsSUFBTUUsNEJBQTRCLEdBQUc7QUFDbkNDLEVBQUFBLFNBQVMsRUFBR1YsY0FBYyxDQUFDVyxPQUFmLENBQ1ZYLGNBQWMsQ0FBQ1ksU0FBZixDQUF5QixDQUN2QlosY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNDLElBQUFBLFdBQVcsRUFBRWQsY0FBYyxDQUFDZTtBQUE3QixHQUFyQixDQUR1QixFQUV2QmYsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNHLElBQUFBLE1BQU0sRUFBRWhCLGNBQWMsQ0FBQ2lCO0FBQXhCLEdBQXJCLENBRnVCLEVBR3ZCakIsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNLLElBQUFBLE9BQU8sRUFBRWxCLGNBQWMsQ0FBQ2lCO0FBQXpCLEdBQXJCLENBSHVCLEVBSXZCakIsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNNLElBQUFBLE9BQU8sRUFBRW5CLGNBQWMsQ0FBQ2lCO0FBQXpCLEdBQXJCLENBSnVCLEVBS3ZCakIsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNPLElBQUFBLE9BQU8sRUFBRXBCLGNBQWMsQ0FBQ2lCO0FBQXpCLEdBQXJCLENBTHVCLEVBTXZCakIsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNRLElBQUFBLEtBQUssRUFBRXJCLGNBQWMsQ0FBQ2U7QUFBdkIsR0FBckIsQ0FOdUIsRUFPdkJmLGNBQWMsQ0FBQ2EsS0FBZixDQUFxQjtBQUFDUyxJQUFBQSxNQUFNLEVBQUV0QixjQUFjLENBQUNlO0FBQXhCLEdBQXJCLENBUHVCLEVBUXZCZixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ1UsSUFBQUEsTUFBTSxFQUFFdkIsY0FBYyxDQUFDZTtBQUF4QixHQUFyQixDQVJ1QixFQVN2QmYsY0FBYyxDQUFDYSxLQUFmLENBQXFCO0FBQUNXLElBQUFBLFVBQVUsRUFBRXhCLGNBQWMsQ0FBQ2U7QUFBNUIsR0FBckIsQ0FUdUIsRUFVdkJmLGNBQWMsQ0FBQ2EsS0FBZixDQUFxQjtBQUFDWSxJQUFBQSxVQUFVLEVBQUV6QixjQUFjLENBQUNlO0FBQTVCLEdBQXJCLENBVnVCLEVBV3ZCZixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ2EsSUFBQUEsS0FBSyxFQUFFMUIsY0FBYyxDQUFDaUI7QUFBdkIsR0FBckIsQ0FYdUIsRUFZdkJqQixjQUFjLENBQUNhLEtBQWYsQ0FBcUI7QUFBQ2MsSUFBQUEsS0FBSyxFQUFFM0IsY0FBYyxDQUFDaUI7QUFBdkIsR0FBckIsQ0FadUIsQ0FBekIsQ0FEVSxDQUR1QjtBQWdDbkNXLEVBQUFBLGVBQWUsRUFBRXpCLHVCQWhDa0I7QUFpQ25DMEIsRUFBQUEsZ0JBQWdCLEVBQUVyQix3QkFqQ2lCO0FBa0NuQ2MsRUFBQUEsTUFBTSxFQUFHcEIsa0JBQWtCLENBQ3pCRixjQUFjLENBQUNlLE1BRFUsRUFFekIsaUNBRnlCLENBbENRO0FBc0NuQ1EsRUFBQUEsTUFBTSxFQUFHckIsa0JBQWtCLENBQ3pCRixjQUFjLENBQUNlLE1BRFUsRUFFekIsaUNBRnlCLENBdENRO0FBMENuQ2UsRUFBQUEsUUFBUSxFQUFHNUIsa0JBQWtCLENBQzNCRixjQUFjLENBQUNlLE1BRFksRUFFM0IsaUNBRjJCLENBMUNNO0FBOENuQ1MsRUFBQUEsVUFBVSxFQUFHdEIsa0JBQWtCLENBQzdCRixjQUFjLENBQUNlLE1BRGMsRUFFN0IsaUNBRjZCLENBOUNJO0FBa0RuQ1UsRUFBQUEsVUFBVSxFQUFHdkIsa0JBQWtCLENBQzdCRixjQUFjLENBQUNlLE1BRGMsRUFFN0IsaUNBRjZCO0FBbERJLENBQXJDO0FBd0RBZ0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdkIsNEJBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgUmVhY3RQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbmNvbnN0IGRlcHJlY2F0ZWRQcm9wVHlwZSA9IHJlcXVpcmUoJy4uL1V0aWxpdGllcy9kZXByZWNhdGVkUHJvcFR5cGUnKTtcblxuY29uc3QgVHJhbnNmb3JtTWF0cml4UHJvcFR5cGUgPSBmdW5jdGlvbihcbiAgcHJvcHM6IE9iamVjdCxcbiAgcHJvcE5hbWU6IHN0cmluZyxcbiAgY29tcG9uZW50TmFtZTogc3RyaW5nLFxuKTogP0Vycm9yIHtcbiAgaWYgKHByb3BzW3Byb3BOYW1lXSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAnVGhlIHRyYW5zZm9ybU1hdHJpeCBzdHlsZSBwcm9wZXJ0eSBpcyBkZXByZWNhdGVkLiAnICtcbiAgICAgICAgJ1VzZSBgdHJhbnNmb3JtOiBbeyBtYXRyaXg6IC4uLiB9XWAgaW5zdGVhZC4nLFxuICAgICk7XG4gIH1cbn07XG5cbmNvbnN0IERlY29tcG9zZWRNYXRyaXhQcm9wVHlwZSA9IGZ1bmN0aW9uKFxuICBwcm9wczogT2JqZWN0LFxuICBwcm9wTmFtZTogc3RyaW5nLFxuICBjb21wb25lbnROYW1lOiBzdHJpbmcsXG4pOiA/RXJyb3Ige1xuICBpZiAocHJvcHNbcHJvcE5hbWVdKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICdUaGUgZGVjb21wb3NlZE1hdHJpeCBzdHlsZSBwcm9wZXJ0eSBpcyBkZXByZWNhdGVkLiAnICtcbiAgICAgICAgJ1VzZSBgdHJhbnNmb3JtOiBbLi4uXWAgaW5zdGVhZC4nLFxuICAgICk7XG4gIH1cbn07XG5cbmNvbnN0IERlcHJlY2F0ZWRUcmFuc2Zvcm1Qcm9wVHlwZXMgPSB7XG4gIHRyYW5zZm9ybTogKFJlYWN0UHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUmVhY3RQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtwZXJzcGVjdGl2ZTogUmVhY3RQcm9wVHlwZXMubnVtYmVyfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7cm90YXRlOiBSZWFjdFByb3BUeXBlcy5zdHJpbmd9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtyb3RhdGVYOiBSZWFjdFByb3BUeXBlcy5zdHJpbmd9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtyb3RhdGVZOiBSZWFjdFByb3BUeXBlcy5zdHJpbmd9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtyb3RhdGVaOiBSZWFjdFByb3BUeXBlcy5zdHJpbmd9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtzY2FsZTogUmVhY3RQcm9wVHlwZXMubnVtYmVyfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7c2NhbGVYOiBSZWFjdFByb3BUeXBlcy5udW1iZXJ9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtzY2FsZVk6IFJlYWN0UHJvcFR5cGVzLm51bWJlcn0pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3RyYW5zbGF0ZVg6IFJlYWN0UHJvcFR5cGVzLm51bWJlcn0pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3RyYW5zbGF0ZVk6IFJlYWN0UHJvcFR5cGVzLm51bWJlcn0pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3NrZXdYOiBSZWFjdFByb3BUeXBlcy5zdHJpbmd9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtza2V3WTogUmVhY3RQcm9wVHlwZXMuc3RyaW5nfSksXG4gICAgXSksXG4gICk6IFJlYWN0JFByb3BUeXBlJFByaW1pdGl2ZTxcbiAgICBBcnJheTxcbiAgICAgIHwge3BlcnNwZWN0aXZlPzogbnVtYmVyLCAuLi59XG4gICAgICB8IHtyb3RhdGU/OiBzdHJpbmcsIC4uLn1cbiAgICAgIHwge3JvdGF0ZVg/OiBzdHJpbmcsIC4uLn1cbiAgICAgIHwge3JvdGF0ZVk/OiBzdHJpbmcsIC4uLn1cbiAgICAgIHwge3JvdGF0ZVo/OiBzdHJpbmcsIC4uLn1cbiAgICAgIHwge3NjYWxlPzogbnVtYmVyLCAuLi59XG4gICAgICB8IHtzY2FsZVg/OiBudW1iZXIsIC4uLn1cbiAgICAgIHwge3NjYWxlWT86IG51bWJlciwgLi4ufVxuICAgICAgfCB7dHJhbnNsYXRlWD86IG51bWJlciwgLi4ufVxuICAgICAgfCB7dHJhbnNsYXRlWT86IG51bWJlciwgLi4ufVxuICAgICAgfCB7c2tld1g/OiBzdHJpbmcsIC4uLn1cbiAgICAgIHwge3NrZXdZPzogc3RyaW5nLCAuLi59LFxuICAgID4sXG4gID4pLFxuICB0cmFuc2Zvcm1NYXRyaXg6IFRyYW5zZm9ybU1hdHJpeFByb3BUeXBlLFxuICBkZWNvbXBvc2VkTWF0cml4OiBEZWNvbXBvc2VkTWF0cml4UHJvcFR5cGUsXG4gIHNjYWxlWDogKGRlcHJlY2F0ZWRQcm9wVHlwZShcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgJ1VzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC4nLFxuICApOiBSZWFjdFByb3BzQ2hlY2tUeXBlKSxcbiAgc2NhbGVZOiAoZGVwcmVjYXRlZFByb3BUeXBlKFxuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICAnVXNlIHRoZSB0cmFuc2Zvcm0gcHJvcCBpbnN0ZWFkLicsXG4gICk6IFJlYWN0UHJvcHNDaGVja1R5cGUpLFxuICByb3RhdGlvbjogKGRlcHJlY2F0ZWRQcm9wVHlwZShcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgJ1VzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC4nLFxuICApOiBSZWFjdFByb3BzQ2hlY2tUeXBlKSxcbiAgdHJhbnNsYXRlWDogKGRlcHJlY2F0ZWRQcm9wVHlwZShcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgJ1VzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC4nLFxuICApOiBSZWFjdFByb3BzQ2hlY2tUeXBlKSxcbiAgdHJhbnNsYXRlWTogKGRlcHJlY2F0ZWRQcm9wVHlwZShcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgJ1VzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC4nLFxuICApOiBSZWFjdFByb3BzQ2hlY2tUeXBlKSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGVwcmVjYXRlZFRyYW5zZm9ybVByb3BUeXBlcztcbiJdfQ==