24a65c9cd60d66d10ff658a8babf30cf
module.exports = {
  get BatchedBridge() {
    return require('../BatchedBridge/BatchedBridge.js');
  },

  get ExceptionsManager() {
    return require('../Core/ExceptionsManager');
  },

  get Platform() {
    return require('../Utilities/Platform');
  },

  get RCTEventEmitter() {
    return require('../EventEmitter/RCTEventEmitter');
  },

  get ReactNativeViewConfigRegistry() {
    return require('../Renderer/shims/ReactNativeViewConfigRegistry');
  },

  get TextInputState() {
    return require('../Components/TextInput/TextInputState');
  },

  get UIManager() {
    return require('../ReactNative/UIManager');
  },

  get deepDiffer() {
    return require('../Utilities/differ/deepDiffer');
  },

  get deepFreezeAndThrowOnMutationInDev() {
    return require('../Utilities/deepFreezeAndThrowOnMutationInDev');
  },

  get flattenStyle() {
    return require('../StyleSheet/flattenStyle');
  },

  get ReactFiberErrorDialog() {
    return require('../Core/ReactFiberErrorDialog');
  }

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0TmF0aXZlUHJpdmF0ZUludGVyZmFjZS5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQmF0Y2hlZEJyaWRnZSIsInJlcXVpcmUiLCJFeGNlcHRpb25zTWFuYWdlciIsIlBsYXRmb3JtIiwiUkNURXZlbnRFbWl0dGVyIiwiUmVhY3ROYXRpdmVWaWV3Q29uZmlnUmVnaXN0cnkiLCJUZXh0SW5wdXRTdGF0ZSIsIlVJTWFuYWdlciIsImRlZXBEaWZmZXIiLCJkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYiLCJmbGF0dGVuU3R5bGUiLCJSZWFjdEZpYmVyRXJyb3JEaWFsb2ciXSwibWFwcGluZ3MiOiJBQXVCQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2YsTUFBSUMsYUFBSixHQUFtQztBQUNqQyxXQUFPQyxPQUFPLENBQUMsbUNBQUQsQ0FBZDtBQUNELEdBSGM7O0FBSWYsTUFBSUMsaUJBQUosR0FBMkM7QUFDekMsV0FBT0QsT0FBTyxDQUFDLDJCQUFELENBQWQ7QUFDRCxHQU5jOztBQU9mLE1BQUlFLFFBQUosR0FBeUI7QUFDdkIsV0FBT0YsT0FBTyxDQUFDLHVCQUFELENBQWQ7QUFDRCxHQVRjOztBQVVmLE1BQUlHLGVBQUosR0FBdUM7QUFDckMsV0FBT0gsT0FBTyxDQUFDLGlDQUFELENBQWQ7QUFDRCxHQVpjOztBQWFmLE1BQUlJLDZCQUFKLEdBQW1FO0FBQ2pFLFdBQU9KLE9BQU8sQ0FBQyxpREFBRCxDQUFkO0FBQ0QsR0FmYzs7QUFnQmYsTUFBSUssY0FBSixHQUFxQztBQUNuQyxXQUFPTCxPQUFPLENBQUMsd0NBQUQsQ0FBZDtBQUNELEdBbEJjOztBQW1CZixNQUFJTSxTQUFKLEdBQTJCO0FBQ3pCLFdBQU9OLE9BQU8sQ0FBQywwQkFBRCxDQUFkO0FBQ0QsR0FyQmM7O0FBc0JmLE1BQUlPLFVBQUosR0FBNkI7QUFDM0IsV0FBT1AsT0FBTyxDQUFDLGdDQUFELENBQWQ7QUFDRCxHQXhCYzs7QUF5QmYsTUFBSVEsaUNBQUosR0FHRTtBQUNBLFdBQU9SLE9BQU8sQ0FBQyxnREFBRCxDQUFkO0FBQ0QsR0E5QmM7O0FBK0JmLE1BQUlTLFlBQUosR0FBaUM7QUFDL0IsV0FBT1QsT0FBTyxDQUFDLDRCQUFELENBQWQ7QUFDRCxHQWpDYzs7QUFrQ2YsTUFBSVUscUJBQUosR0FBbUQ7QUFDakQsV0FBT1YsT0FBTyxDQUFDLCtCQUFELENBQWQ7QUFDRDs7QUFwQ2MsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbmltcG9ydCB0eXBlb2YgQmF0Y2hlZEJyaWRnZSBmcm9tICcuLi9CYXRjaGVkQnJpZGdlL0JhdGNoZWRCcmlkZ2UuanMnO1xuaW1wb3J0IHR5cGVvZiBFeGNlcHRpb25zTWFuYWdlciBmcm9tICcuLi9Db3JlL0V4Y2VwdGlvbnNNYW5hZ2VyJztcbmltcG9ydCB0eXBlb2YgUGxhdGZvcm0gZnJvbSAnLi4vVXRpbGl0aWVzL1BsYXRmb3JtJztcbmltcG9ydCB0eXBlb2YgUkNURXZlbnRFbWl0dGVyIGZyb20gJy4uL0V2ZW50RW1pdHRlci9SQ1RFdmVudEVtaXR0ZXInO1xuaW1wb3J0IHR5cGVvZiBSZWFjdE5hdGl2ZVZpZXdDb25maWdSZWdpc3RyeSBmcm9tICcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVZpZXdDb25maWdSZWdpc3RyeSc7XG5pbXBvcnQgdHlwZW9mIFRleHRJbnB1dFN0YXRlIGZyb20gJy4uL0NvbXBvbmVudHMvVGV4dElucHV0L1RleHRJbnB1dFN0YXRlJztcbmltcG9ydCB0eXBlb2YgVUlNYW5hZ2VyIGZyb20gJy4uL1JlYWN0TmF0aXZlL1VJTWFuYWdlcic7XG5pbXBvcnQgdHlwZW9mIGRlZXBEaWZmZXIgZnJvbSAnLi4vVXRpbGl0aWVzL2RpZmZlci9kZWVwRGlmZmVyJztcbmltcG9ydCB0eXBlb2YgZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2IGZyb20gJy4uL1V0aWxpdGllcy9kZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYnO1xuaW1wb3J0IHR5cGVvZiBmbGF0dGVuU3R5bGUgZnJvbSAnLi4vU3R5bGVTaGVldC9mbGF0dGVuU3R5bGUnO1xuaW1wb3J0IHR5cGVvZiBSZWFjdEZpYmVyRXJyb3JEaWFsb2cgZnJvbSAnLi4vQ29yZS9SZWFjdEZpYmVyRXJyb3JEaWFsb2cnO1xuXG4vLyBmbG93bGludCB1bnNhZmUtZ2V0dGVycy1zZXR0ZXJzOm9mZlxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldCBCYXRjaGVkQnJpZGdlKCk6IEJhdGNoZWRCcmlkZ2Uge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9CYXRjaGVkQnJpZGdlL0JhdGNoZWRCcmlkZ2UuanMnKTtcbiAgfSxcbiAgZ2V0IEV4Y2VwdGlvbnNNYW5hZ2VyKCk6IEV4Y2VwdGlvbnNNYW5hZ2VyIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29yZS9FeGNlcHRpb25zTWFuYWdlcicpO1xuICB9LFxuICBnZXQgUGxhdGZvcm0oKTogUGxhdGZvcm0ge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9VdGlsaXRpZXMvUGxhdGZvcm0nKTtcbiAgfSxcbiAgZ2V0IFJDVEV2ZW50RW1pdHRlcigpOiBSQ1RFdmVudEVtaXR0ZXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9FdmVudEVtaXR0ZXIvUkNURXZlbnRFbWl0dGVyJyk7XG4gIH0sXG4gIGdldCBSZWFjdE5hdGl2ZVZpZXdDb25maWdSZWdpc3RyeSgpOiBSZWFjdE5hdGl2ZVZpZXdDb25maWdSZWdpc3RyeSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVmlld0NvbmZpZ1JlZ2lzdHJ5Jyk7XG4gIH0sXG4gIGdldCBUZXh0SW5wdXRTdGF0ZSgpOiBUZXh0SW5wdXRTdGF0ZSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvVGV4dElucHV0L1RleHRJbnB1dFN0YXRlJyk7XG4gIH0sXG4gIGdldCBVSU1hbmFnZXIoKTogVUlNYW5hZ2VyIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vUmVhY3ROYXRpdmUvVUlNYW5hZ2VyJyk7XG4gIH0sXG4gIGdldCBkZWVwRGlmZmVyKCk6IGRlZXBEaWZmZXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9VdGlsaXRpZXMvZGlmZmVyL2RlZXBEaWZmZXInKTtcbiAgfSxcbiAgZ2V0IGRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldigpOiBkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXY8XG4gICAgLy8gJEZsb3dGaXhNZSAtIGNhbid0IHByb3Blcmx5IHBhcmFtZXRlcml6ZSB0aGUgZ2V0dGVyJ3MgdHlwZVxuICAgICosXG4gID4ge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9VdGlsaXRpZXMvZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2Jyk7XG4gIH0sXG4gIGdldCBmbGF0dGVuU3R5bGUoKTogZmxhdHRlblN0eWxlIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vU3R5bGVTaGVldC9mbGF0dGVuU3R5bGUnKTtcbiAgfSxcbiAgZ2V0IFJlYWN0RmliZXJFcnJvckRpYWxvZygpOiBSZWFjdEZpYmVyRXJyb3JEaWFsb2cge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9Db3JlL1JlYWN0RmliZXJFcnJvckRpYWxvZycpO1xuICB9LFxufTtcbiJdfQ==