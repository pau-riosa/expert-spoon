e53483c7101f08134ca3f363bf91a292
'use strict';

var ScrollViewViewConfig = {
  uiViewClassName: 'RCTScrollView',
  bubblingEventTypes: {},
  directEventTypes: {
    topScrollToTop: {
      registrationName: 'onScrollToTop'
    }
  },
  validAttributes: {
    alwaysBounceHorizontal: true,
    alwaysBounceVertical: true,
    automaticallyAdjustContentInsets: true,
    bounces: true,
    bouncesZoom: true,
    canCancelContentTouches: true,
    centerContent: true,
    contentInset: {
      diff: require('../../Utilities/differ/pointsDiffer')
    },
    contentOffset: {
      diff: require('../../Utilities/differ/pointsDiffer')
    },
    contentInsetAdjustmentBehavior: true,
    decelerationRate: true,
    directionalLockEnabled: true,
    disableIntervalMomentum: true,
    endFillColor: {
      process: require('../../StyleSheet/processColor')
    },
    fadingEdgeLength: true,
    indicatorStyle: true,
    keyboardDismissMode: true,
    maintainVisibleContentPosition: true,
    maximumZoomScale: true,
    minimumZoomScale: true,
    nestedScrollEnabled: true,
    onMomentumScrollBegin: true,
    onMomentumScrollEnd: true,
    onScroll: true,
    onScrollBeginDrag: true,
    onScrollEndDrag: true,
    onScrollToTop: true,
    overScrollMode: true,
    pagingEnabled: true,
    persistentScrollbar: true,
    pinchGestureEnabled: true,
    scrollEnabled: true,
    scrollEventThrottle: true,
    scrollIndicatorInsets: {
      diff: require('../../Utilities/differ/pointsDiffer')
    },
    scrollPerfTag: true,
    scrollToOverflowEnabled: true,
    scrollsToTop: true,
    sendMomentumEvents: true,
    showsHorizontalScrollIndicator: true,
    showsVerticalScrollIndicator: true,
    snapToAlignment: true,
    snapToEnd: true,
    snapToInterval: true,
    snapToOffsets: true,
    snapToStart: true,
    zoomScale: true,
    DEPRECATED_sendUpdatedChildFrames: true
  }
};
module.exports = ScrollViewViewConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjcm9sbFZpZXdWaWV3Q29uZmlnLmpzIl0sIm5hbWVzIjpbIlNjcm9sbFZpZXdWaWV3Q29uZmlnIiwidWlWaWV3Q2xhc3NOYW1lIiwiYnViYmxpbmdFdmVudFR5cGVzIiwiZGlyZWN0RXZlbnRUeXBlcyIsInRvcFNjcm9sbFRvVG9wIiwicmVnaXN0cmF0aW9uTmFtZSIsInZhbGlkQXR0cmlidXRlcyIsImFsd2F5c0JvdW5jZUhvcml6b250YWwiLCJhbHdheXNCb3VuY2VWZXJ0aWNhbCIsImF1dG9tYXRpY2FsbHlBZGp1c3RDb250ZW50SW5zZXRzIiwiYm91bmNlcyIsImJvdW5jZXNab29tIiwiY2FuQ2FuY2VsQ29udGVudFRvdWNoZXMiLCJjZW50ZXJDb250ZW50IiwiY29udGVudEluc2V0IiwiZGlmZiIsInJlcXVpcmUiLCJjb250ZW50T2Zmc2V0IiwiY29udGVudEluc2V0QWRqdXN0bWVudEJlaGF2aW9yIiwiZGVjZWxlcmF0aW9uUmF0ZSIsImRpcmVjdGlvbmFsTG9ja0VuYWJsZWQiLCJkaXNhYmxlSW50ZXJ2YWxNb21lbnR1bSIsImVuZEZpbGxDb2xvciIsInByb2Nlc3MiLCJmYWRpbmdFZGdlTGVuZ3RoIiwiaW5kaWNhdG9yU3R5bGUiLCJrZXlib2FyZERpc21pc3NNb2RlIiwibWFpbnRhaW5WaXNpYmxlQ29udGVudFBvc2l0aW9uIiwibWF4aW11bVpvb21TY2FsZSIsIm1pbmltdW1ab29tU2NhbGUiLCJuZXN0ZWRTY3JvbGxFbmFibGVkIiwib25Nb21lbnR1bVNjcm9sbEJlZ2luIiwib25Nb21lbnR1bVNjcm9sbEVuZCIsIm9uU2Nyb2xsIiwib25TY3JvbGxCZWdpbkRyYWciLCJvblNjcm9sbEVuZERyYWciLCJvblNjcm9sbFRvVG9wIiwib3ZlclNjcm9sbE1vZGUiLCJwYWdpbmdFbmFibGVkIiwicGVyc2lzdGVudFNjcm9sbGJhciIsInBpbmNoR2VzdHVyZUVuYWJsZWQiLCJzY3JvbGxFbmFibGVkIiwic2Nyb2xsRXZlbnRUaHJvdHRsZSIsInNjcm9sbEluZGljYXRvckluc2V0cyIsInNjcm9sbFBlcmZUYWciLCJzY3JvbGxUb092ZXJmbG93RW5hYmxlZCIsInNjcm9sbHNUb1RvcCIsInNlbmRNb21lbnR1bUV2ZW50cyIsInNob3dzSG9yaXpvbnRhbFNjcm9sbEluZGljYXRvciIsInNob3dzVmVydGljYWxTY3JvbGxJbmRpY2F0b3IiLCJzbmFwVG9BbGlnbm1lbnQiLCJzbmFwVG9FbmQiLCJzbmFwVG9JbnRlcnZhbCIsInNuYXBUb09mZnNldHMiLCJzbmFwVG9TdGFydCIsInpvb21TY2FsZSIsIkRFUFJFQ0FURURfc2VuZFVwZGF0ZWRDaGlsZEZyYW1lcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOztBQUlBLElBQU1BLG9CQUFvQixHQUFHO0FBQzNCQyxFQUFBQSxlQUFlLEVBQUUsZUFEVTtBQUUzQkMsRUFBQUEsa0JBQWtCLEVBQUUsRUFGTztBQUczQkMsRUFBQUEsZ0JBQWdCLEVBQUU7QUFDaEJDLElBQUFBLGNBQWMsRUFBRTtBQUNkQyxNQUFBQSxnQkFBZ0IsRUFBRTtBQURKO0FBREEsR0FIUztBQVEzQkMsRUFBQUEsZUFBZSxFQUFFO0FBQ2ZDLElBQUFBLHNCQUFzQixFQUFFLElBRFQ7QUFFZkMsSUFBQUEsb0JBQW9CLEVBQUUsSUFGUDtBQUdmQyxJQUFBQSxnQ0FBZ0MsRUFBRSxJQUhuQjtBQUlmQyxJQUFBQSxPQUFPLEVBQUUsSUFKTTtBQUtmQyxJQUFBQSxXQUFXLEVBQUUsSUFMRTtBQU1mQyxJQUFBQSx1QkFBdUIsRUFBRSxJQU5WO0FBT2ZDLElBQUFBLGFBQWEsRUFBRSxJQVBBO0FBUWZDLElBQUFBLFlBQVksRUFBRTtBQUFDQyxNQUFBQSxJQUFJLEVBQUVDLE9BQU8sQ0FBQyxxQ0FBRDtBQUFkLEtBUkM7QUFTZkMsSUFBQUEsYUFBYSxFQUFFO0FBQUNGLE1BQUFBLElBQUksRUFBRUMsT0FBTyxDQUFDLHFDQUFEO0FBQWQsS0FUQTtBQVVmRSxJQUFBQSw4QkFBOEIsRUFBRSxJQVZqQjtBQVdmQyxJQUFBQSxnQkFBZ0IsRUFBRSxJQVhIO0FBWWZDLElBQUFBLHNCQUFzQixFQUFFLElBWlQ7QUFhZkMsSUFBQUEsdUJBQXVCLEVBQUUsSUFiVjtBQWNmQyxJQUFBQSxZQUFZLEVBQUU7QUFBQ0MsTUFBQUEsT0FBTyxFQUFFUCxPQUFPLENBQUMsK0JBQUQ7QUFBakIsS0FkQztBQWVmUSxJQUFBQSxnQkFBZ0IsRUFBRSxJQWZIO0FBZ0JmQyxJQUFBQSxjQUFjLEVBQUUsSUFoQkQ7QUFpQmZDLElBQUFBLG1CQUFtQixFQUFFLElBakJOO0FBa0JmQyxJQUFBQSw4QkFBOEIsRUFBRSxJQWxCakI7QUFtQmZDLElBQUFBLGdCQUFnQixFQUFFLElBbkJIO0FBb0JmQyxJQUFBQSxnQkFBZ0IsRUFBRSxJQXBCSDtBQXFCZkMsSUFBQUEsbUJBQW1CLEVBQUUsSUFyQk47QUFzQmZDLElBQUFBLHFCQUFxQixFQUFFLElBdEJSO0FBdUJmQyxJQUFBQSxtQkFBbUIsRUFBRSxJQXZCTjtBQXdCZkMsSUFBQUEsUUFBUSxFQUFFLElBeEJLO0FBeUJmQyxJQUFBQSxpQkFBaUIsRUFBRSxJQXpCSjtBQTBCZkMsSUFBQUEsZUFBZSxFQUFFLElBMUJGO0FBMkJmQyxJQUFBQSxhQUFhLEVBQUUsSUEzQkE7QUE0QmZDLElBQUFBLGNBQWMsRUFBRSxJQTVCRDtBQTZCZkMsSUFBQUEsYUFBYSxFQUFFLElBN0JBO0FBOEJmQyxJQUFBQSxtQkFBbUIsRUFBRSxJQTlCTjtBQStCZkMsSUFBQUEsbUJBQW1CLEVBQUUsSUEvQk47QUFnQ2ZDLElBQUFBLGFBQWEsRUFBRSxJQWhDQTtBQWlDZkMsSUFBQUEsbUJBQW1CLEVBQUUsSUFqQ047QUFrQ2ZDLElBQUFBLHFCQUFxQixFQUFFO0FBQ3JCNUIsTUFBQUEsSUFBSSxFQUFFQyxPQUFPLENBQUMscUNBQUQ7QUFEUSxLQWxDUjtBQXFDZjRCLElBQUFBLGFBQWEsRUFBRSxJQXJDQTtBQXNDZkMsSUFBQUEsdUJBQXVCLEVBQUUsSUF0Q1Y7QUF1Q2ZDLElBQUFBLFlBQVksRUFBRSxJQXZDQztBQXdDZkMsSUFBQUEsa0JBQWtCLEVBQUUsSUF4Q0w7QUF5Q2ZDLElBQUFBLDhCQUE4QixFQUFFLElBekNqQjtBQTBDZkMsSUFBQUEsNEJBQTRCLEVBQUUsSUExQ2Y7QUEyQ2ZDLElBQUFBLGVBQWUsRUFBRSxJQTNDRjtBQTRDZkMsSUFBQUEsU0FBUyxFQUFFLElBNUNJO0FBNkNmQyxJQUFBQSxjQUFjLEVBQUUsSUE3Q0Q7QUE4Q2ZDLElBQUFBLGFBQWEsRUFBRSxJQTlDQTtBQStDZkMsSUFBQUEsV0FBVyxFQUFFLElBL0NFO0FBZ0RmQyxJQUFBQSxTQUFTLEVBQUUsSUFoREk7QUFrRGZDLElBQUFBLGlDQUFpQyxFQUFFO0FBbERwQjtBQVJVLENBQTdCO0FBOERBQyxNQUFNLENBQUNDLE9BQVAsR0FBa0IxRCxvQkFBbEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGUge0dlbmVyYXRlZFZpZXdDb25maWd9IGZyb20gJy4uLy4uL1V0aWxpdGllcy9yZWdpc3RlckdlbmVyYXRlZFZpZXdDb25maWcnO1xuXG5jb25zdCBTY3JvbGxWaWV3Vmlld0NvbmZpZyA9IHtcbiAgdWlWaWV3Q2xhc3NOYW1lOiAnUkNUU2Nyb2xsVmlldycsXG4gIGJ1YmJsaW5nRXZlbnRUeXBlczoge30sXG4gIGRpcmVjdEV2ZW50VHlwZXM6IHtcbiAgICB0b3BTY3JvbGxUb1RvcDoge1xuICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uU2Nyb2xsVG9Ub3AnLFxuICAgIH0sXG4gIH0sXG4gIHZhbGlkQXR0cmlidXRlczoge1xuICAgIGFsd2F5c0JvdW5jZUhvcml6b250YWw6IHRydWUsXG4gICAgYWx3YXlzQm91bmNlVmVydGljYWw6IHRydWUsXG4gICAgYXV0b21hdGljYWxseUFkanVzdENvbnRlbnRJbnNldHM6IHRydWUsXG4gICAgYm91bmNlczogdHJ1ZSxcbiAgICBib3VuY2VzWm9vbTogdHJ1ZSxcbiAgICBjYW5DYW5jZWxDb250ZW50VG91Y2hlczogdHJ1ZSxcbiAgICBjZW50ZXJDb250ZW50OiB0cnVlLFxuICAgIGNvbnRlbnRJbnNldDoge2RpZmY6IHJlcXVpcmUoJy4uLy4uL1V0aWxpdGllcy9kaWZmZXIvcG9pbnRzRGlmZmVyJyl9LFxuICAgIGNvbnRlbnRPZmZzZXQ6IHtkaWZmOiByZXF1aXJlKCcuLi8uLi9VdGlsaXRpZXMvZGlmZmVyL3BvaW50c0RpZmZlcicpfSxcbiAgICBjb250ZW50SW5zZXRBZGp1c3RtZW50QmVoYXZpb3I6IHRydWUsXG4gICAgZGVjZWxlcmF0aW9uUmF0ZTogdHJ1ZSxcbiAgICBkaXJlY3Rpb25hbExvY2tFbmFibGVkOiB0cnVlLFxuICAgIGRpc2FibGVJbnRlcnZhbE1vbWVudHVtOiB0cnVlLFxuICAgIGVuZEZpbGxDb2xvcjoge3Byb2Nlc3M6IHJlcXVpcmUoJy4uLy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJyl9LFxuICAgIGZhZGluZ0VkZ2VMZW5ndGg6IHRydWUsXG4gICAgaW5kaWNhdG9yU3R5bGU6IHRydWUsXG4gICAga2V5Ym9hcmREaXNtaXNzTW9kZTogdHJ1ZSxcbiAgICBtYWludGFpblZpc2libGVDb250ZW50UG9zaXRpb246IHRydWUsXG4gICAgbWF4aW11bVpvb21TY2FsZTogdHJ1ZSxcbiAgICBtaW5pbXVtWm9vbVNjYWxlOiB0cnVlLFxuICAgIG5lc3RlZFNjcm9sbEVuYWJsZWQ6IHRydWUsXG4gICAgb25Nb21lbnR1bVNjcm9sbEJlZ2luOiB0cnVlLFxuICAgIG9uTW9tZW50dW1TY3JvbGxFbmQ6IHRydWUsXG4gICAgb25TY3JvbGw6IHRydWUsXG4gICAgb25TY3JvbGxCZWdpbkRyYWc6IHRydWUsXG4gICAgb25TY3JvbGxFbmREcmFnOiB0cnVlLFxuICAgIG9uU2Nyb2xsVG9Ub3A6IHRydWUsXG4gICAgb3ZlclNjcm9sbE1vZGU6IHRydWUsXG4gICAgcGFnaW5nRW5hYmxlZDogdHJ1ZSxcbiAgICBwZXJzaXN0ZW50U2Nyb2xsYmFyOiB0cnVlLFxuICAgIHBpbmNoR2VzdHVyZUVuYWJsZWQ6IHRydWUsXG4gICAgc2Nyb2xsRW5hYmxlZDogdHJ1ZSxcbiAgICBzY3JvbGxFdmVudFRocm90dGxlOiB0cnVlLFxuICAgIHNjcm9sbEluZGljYXRvckluc2V0czoge1xuICAgICAgZGlmZjogcmVxdWlyZSgnLi4vLi4vVXRpbGl0aWVzL2RpZmZlci9wb2ludHNEaWZmZXInKSxcbiAgICB9LFxuICAgIHNjcm9sbFBlcmZUYWc6IHRydWUsXG4gICAgc2Nyb2xsVG9PdmVyZmxvd0VuYWJsZWQ6IHRydWUsXG4gICAgc2Nyb2xsc1RvVG9wOiB0cnVlLFxuICAgIHNlbmRNb21lbnR1bUV2ZW50czogdHJ1ZSxcbiAgICBzaG93c0hvcml6b250YWxTY3JvbGxJbmRpY2F0b3I6IHRydWUsXG4gICAgc2hvd3NWZXJ0aWNhbFNjcm9sbEluZGljYXRvcjogdHJ1ZSxcbiAgICBzbmFwVG9BbGlnbm1lbnQ6IHRydWUsXG4gICAgc25hcFRvRW5kOiB0cnVlLFxuICAgIHNuYXBUb0ludGVydmFsOiB0cnVlLFxuICAgIHNuYXBUb09mZnNldHM6IHRydWUsXG4gICAgc25hcFRvU3RhcnQ6IHRydWUsXG4gICAgem9vbVNjYWxlOiB0cnVlLFxuXG4gICAgREVQUkVDQVRFRF9zZW5kVXBkYXRlZENoaWxkRnJhbWVzOiB0cnVlLFxuICB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSAoU2Nyb2xsVmlld1ZpZXdDb25maWc6IEdlbmVyYXRlZFZpZXdDb25maWcpO1xuIl19