{"version":3,"sources":["ExceptionsManager.js"],"names":["SyntheticError","name","Error","userExceptionDecorator","inUserExceptionDecorator","unstable_setExceptionDecorator","exceptionDecorator","preprocessException","data","exceptionID","reportException","e","isFatal","NativeExceptionsManager","require","default","parseErrorStack","stack","currentExceptionID","originalMessage","message","componentStack","namePrefix","isFromConsoleError","startsWith","console","_errorOriginal","error","jsEngine","isHandledByLogBox","forceRedbox","global","__unstable_isLogBoxEnabled","id","extraData","rawStack","suppressRedBox","LogBoxData","addException","isComponentError","__DEV__","preventSymbolication","symbolicateStackTrace","then","prettyStack","updateExceptionMessage","catch","log","handleException","reactConsoleErrorHandler","reportErrorsAsExceptions","apply","arguments","stringifySafe","str","Array","prototype","map","call","value","join","slice","installConsoleErrorReporter","bind","undefined","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {ExtendedError} from './Devtools/parseErrorStack';\nimport * as LogBoxData from '../LogBox/Data/LogBoxData';\nimport type {ExceptionData} from './NativeExceptionsManager';\n\nclass SyntheticError extends Error {\n  name: string = '';\n}\n\ntype ExceptionDecorator = ExceptionData => ExceptionData;\n\nlet userExceptionDecorator: ?ExceptionDecorator;\nlet inUserExceptionDecorator = false;\n\n/**\n * Allows the app to add information to the exception report before it is sent\n * to native. This API is not final.\n */\n\nfunction unstable_setExceptionDecorator(\n  exceptionDecorator: ?ExceptionDecorator,\n) {\n  userExceptionDecorator = exceptionDecorator;\n}\n\nfunction preprocessException(data: ExceptionData): ExceptionData {\n  if (userExceptionDecorator && !inUserExceptionDecorator) {\n    inUserExceptionDecorator = true;\n    try {\n      return userExceptionDecorator(data);\n    } catch {\n      // Fall through\n    } finally {\n      inUserExceptionDecorator = false;\n    }\n  }\n  return data;\n}\n\n/**\n * Handles the developer-visible aspect of errors and exceptions\n */\nlet exceptionID = 0;\nfunction reportException(e: ExtendedError, isFatal: boolean) {\n  const NativeExceptionsManager = require('./NativeExceptionsManager').default;\n  if (NativeExceptionsManager) {\n    const parseErrorStack = require('./Devtools/parseErrorStack');\n    const stack = parseErrorStack(e);\n    const currentExceptionID = ++exceptionID;\n    const originalMessage = e.message || '';\n    let message = originalMessage;\n    if (e.componentStack != null) {\n      message += `\\n\\nThis error is located at:${e.componentStack}`;\n    }\n    const namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;\n    const isFromConsoleError = e.name === 'console.error';\n\n    if (!message.startsWith(namePrefix)) {\n      message = namePrefix + message;\n    }\n\n    // Errors created by `console.error` have already been printed.\n    if (!isFromConsoleError) {\n      if (console._errorOriginal) {\n        console._errorOriginal(message);\n      } else {\n        console.error(message);\n      }\n    }\n\n    message =\n      e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;\n\n    const isHandledByLogBox =\n      e.forceRedbox !== true && global.__unstable_isLogBoxEnabled === true;\n\n    const data = preprocessException({\n      message,\n      originalMessage: message === originalMessage ? null : originalMessage,\n      name: e.name == null || e.name === '' ? null : e.name,\n      componentStack:\n        typeof e.componentStack === 'string' ? e.componentStack : null,\n      stack,\n      id: currentExceptionID,\n      isFatal,\n      extraData: {\n        jsEngine: e.jsEngine,\n        rawStack: e.stack,\n\n        // Hack to hide native redboxes when in the LogBox experiment.\n        // This is intentionally untyped and stuffed here, because it is temporary.\n        suppressRedBox: isHandledByLogBox,\n      },\n    });\n\n    if (isHandledByLogBox) {\n      LogBoxData.addException({\n        ...data,\n        isComponentError: !!e.isComponentError,\n      });\n    }\n\n    NativeExceptionsManager.reportException(data);\n\n    if (__DEV__) {\n      if (e.preventSymbolication === true) {\n        return;\n      }\n      const symbolicateStackTrace = require('./Devtools/symbolicateStackTrace');\n      symbolicateStackTrace(stack)\n        .then(({stack: prettyStack}) => {\n          if (prettyStack) {\n            NativeExceptionsManager.updateExceptionMessage(\n              data.message,\n              prettyStack,\n              currentExceptionID,\n            );\n          } else {\n            throw new Error('The stack is null');\n          }\n        })\n        .catch(error => {\n          console.log('Unable to symbolicate stack trace: ' + error.message);\n        });\n    }\n  }\n}\n\ndeclare var console: typeof console & {\n  _errorOriginal: typeof console.error,\n  reportErrorsAsExceptions: boolean,\n  ...\n};\n\n/**\n * Logs exceptions to the (native) console and displays them\n */\nfunction handleException(e: mixed, isFatal: boolean) {\n  let error: Error;\n  if (e instanceof Error) {\n    error = e;\n  } else {\n    // Workaround for reporting errors caused by `throw 'some string'`\n    // Unfortunately there is no way to figure out the stacktrace in this\n    // case, so if you ended up here trying to trace an error, look for\n    // `throw '<error message>'` somewhere in your codebase.\n    error = new SyntheticError(e);\n  }\n  reportException(error, isFatal);\n}\n\nfunction reactConsoleErrorHandler() {\n  if (!console.reportErrorsAsExceptions) {\n    console._errorOriginal.apply(console, arguments);\n    return;\n  }\n\n  if (arguments[0] && arguments[0].stack) {\n    // reportException will console.error this with high enough fidelity.\n    reportException(arguments[0], /* isFatal */ false);\n  } else {\n    console._errorOriginal.apply(console, arguments);\n    const stringifySafe = require('../Utilities/stringifySafe');\n    const str = Array.prototype.map\n      .call(arguments, value =>\n        typeof value === 'string' ? value : stringifySafe(value),\n      )\n      .join(' ');\n\n    if (str.slice(0, 9) === 'Warning: ') {\n      // React warnings use console.error so that a stack trace is shown, but\n      // we don't (currently) want these to show a redbox\n      // (Note: Logic duplicated in polyfills/console.js.)\n      return;\n    }\n    const error: ExtendedError = new SyntheticError(str);\n    error.name = 'console.error';\n    reportException(error, /* isFatal */ false);\n  }\n}\n\n/**\n * Shows a redbox with stacktrace for all console.error messages.  Disable by\n * setting `console.reportErrorsAsExceptions = false;` in your app.\n */\nfunction installConsoleErrorReporter() {\n  // Enable reportErrorsAsExceptions\n  if (console._errorOriginal) {\n    return; // already installed\n  }\n  // Flow doesn't like it when you set arbitrary values on a global object\n  console._errorOriginal = console.error.bind(console);\n  console.error = reactConsoleErrorHandler;\n  if (console.reportErrorsAsExceptions === undefined) {\n    // Individual apps can disable this\n    // Flow doesn't like it when you set arbitrary values on a global object\n    console.reportErrorsAsExceptions = true;\n  }\n}\n\nmodule.exports = {\n  handleException,\n  installConsoleErrorReporter,\n  SyntheticError,\n  unstable_setExceptionDecorator,\n};\n"]}