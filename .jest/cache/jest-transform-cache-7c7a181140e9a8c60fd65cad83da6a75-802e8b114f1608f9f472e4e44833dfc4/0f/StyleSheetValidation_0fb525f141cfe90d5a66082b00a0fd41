b108f1ec1c0fb0b3efdc752f9e414d81
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var DeprecatedImageStylePropTypes = require('../DeprecatedPropTypes/DeprecatedImageStylePropTypes');

var DeprecatedTextStylePropTypes = require('../DeprecatedPropTypes/DeprecatedTextStylePropTypes');

var DeprecatedViewStylePropTypes = require('../DeprecatedPropTypes/DeprecatedViewStylePropTypes');

var invariant = require('invariant');

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var StyleSheetValidation = function () {
  function StyleSheetValidation() {
    (0, _classCallCheck2.default)(this, StyleSheetValidation);
  }

  (0, _createClass2.default)(StyleSheetValidation, null, [{
    key: "validateStyleProp",
    value: function validateStyleProp(prop, style, caller) {
      if (!__DEV__ || global.__RCTProfileIsProfiling) {
        return;
      }

      if (allStylePropTypes[prop] === undefined) {
        var message1 = '"' + prop + '" is not a valid style property.';
        var message2 = '\nValid style props: ' + JSON.stringify(Object.keys(allStylePropTypes).sort(), null, '  ');
        styleError(message1, style, caller, message2);
      }

      var error = allStylePropTypes[prop](style, prop, caller, 'prop', null, ReactPropTypesSecret);

      if (error) {
        styleError(error.message, style, caller);
      }
    }
  }, {
    key: "validateStyle",
    value: function validateStyle(name, styles) {
      if (!__DEV__ || global.__RCTProfileIsProfiling) {
        return;
      }

      for (var prop in styles[name]) {
        StyleSheetValidation.validateStyleProp(prop, styles[name], 'StyleSheet ' + name);
      }
    }
  }, {
    key: "addValidStylePropTypes",
    value: function addValidStylePropTypes(stylePropTypes) {
      if (!__DEV__ || global.__RCTProfileIsProfiling) {
        return;
      }

      for (var key in stylePropTypes) {
        allStylePropTypes[key] = stylePropTypes[key];
      }
    }
  }]);
  return StyleSheetValidation;
}();

var styleError = function styleError(message1, style, caller, message2) {
  invariant(false, message1 + '\n' + (caller || '<<unknown>>') + ': ' + JSON.stringify(style, null, '  ') + (message2 || ''));
};

var allStylePropTypes = {};

if (__DEV__ && !global.__RCTProfileIsProfiling) {
  StyleSheetValidation.addValidStylePropTypes(DeprecatedImageStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(DeprecatedTextStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(DeprecatedViewStylePropTypes);
}

module.exports = StyleSheetValidation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN0eWxlU2hlZXRWYWxpZGF0aW9uLmpzIl0sIm5hbWVzIjpbIkRlcHJlY2F0ZWRJbWFnZVN0eWxlUHJvcFR5cGVzIiwicmVxdWlyZSIsIkRlcHJlY2F0ZWRUZXh0U3R5bGVQcm9wVHlwZXMiLCJEZXByZWNhdGVkVmlld1N0eWxlUHJvcFR5cGVzIiwiaW52YXJpYW50IiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJTdHlsZVNoZWV0VmFsaWRhdGlvbiIsInByb3AiLCJzdHlsZSIsImNhbGxlciIsIl9fREVWX18iLCJnbG9iYWwiLCJfX1JDVFByb2ZpbGVJc1Byb2ZpbGluZyIsImFsbFN0eWxlUHJvcFR5cGVzIiwidW5kZWZpbmVkIiwibWVzc2FnZTEiLCJtZXNzYWdlMiIsIkpTT04iLCJzdHJpbmdpZnkiLCJPYmplY3QiLCJrZXlzIiwic29ydCIsInN0eWxlRXJyb3IiLCJlcnJvciIsIm1lc3NhZ2UiLCJuYW1lIiwic3R5bGVzIiwidmFsaWRhdGVTdHlsZVByb3AiLCJzdHlsZVByb3BUeXBlcyIsImtleSIsImFkZFZhbGlkU3R5bGVQcm9wVHlwZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7QUFFQSxJQUFNQSw2QkFBNkIsR0FBR0MsT0FBTyxDQUFDLHNEQUFELENBQTdDOztBQUNBLElBQU1DLDRCQUE0QixHQUFHRCxPQUFPLENBQUMscURBQUQsQ0FBNUM7O0FBQ0EsSUFBTUUsNEJBQTRCLEdBQUdGLE9BQU8sQ0FBQyxxREFBRCxDQUE1Qzs7QUFFQSxJQUFNRyxTQUFTLEdBQUdILE9BQU8sQ0FBQyxXQUFELENBQXpCOztBQU1BLElBQU1JLG9CQUFvQixHQUFHLDhDQUE3Qjs7SUFFTUMsb0I7Ozs7Ozs7c0NBQ3FCQyxJLEVBQWNDLEssRUFBZUMsTSxFQUFnQjtBQUNwRSxVQUFJLENBQUNDLE9BQUQsSUFBWUMsTUFBTSxDQUFDQyx1QkFBdkIsRUFBZ0Q7QUFDOUM7QUFDRDs7QUFDRCxVQUFJQyxpQkFBaUIsQ0FBQ04sSUFBRCxDQUFqQixLQUE0Qk8sU0FBaEMsRUFBMkM7QUFDekMsWUFBTUMsUUFBUSxHQUFHLE1BQU1SLElBQU4sR0FBYSxrQ0FBOUI7QUFDQSxZQUFNUyxRQUFRLEdBQ1osMEJBQ0FDLElBQUksQ0FBQ0MsU0FBTCxDQUFlQyxNQUFNLENBQUNDLElBQVAsQ0FBWVAsaUJBQVosRUFBK0JRLElBQS9CLEVBQWYsRUFBc0QsSUFBdEQsRUFBNEQsSUFBNUQsQ0FGRjtBQUdBQyxRQUFBQSxVQUFVLENBQUNQLFFBQUQsRUFBV1AsS0FBWCxFQUFrQkMsTUFBbEIsRUFBMEJPLFFBQTFCLENBQVY7QUFDRDs7QUFDRCxVQUFNTyxLQUFLLEdBQUdWLGlCQUFpQixDQUFDTixJQUFELENBQWpCLENBQ1pDLEtBRFksRUFFWkQsSUFGWSxFQUdaRSxNQUhZLEVBSVosTUFKWSxFQUtaLElBTFksRUFNWkosb0JBTlksQ0FBZDs7QUFRQSxVQUFJa0IsS0FBSixFQUFXO0FBQ1RELFFBQUFBLFVBQVUsQ0FBQ0MsS0FBSyxDQUFDQyxPQUFQLEVBQWdCaEIsS0FBaEIsRUFBdUJDLE1BQXZCLENBQVY7QUFDRDtBQUNGOzs7a0NBRW9CZ0IsSSxFQUFjQyxNLEVBQWdCO0FBQ2pELFVBQUksQ0FBQ2hCLE9BQUQsSUFBWUMsTUFBTSxDQUFDQyx1QkFBdkIsRUFBZ0Q7QUFDOUM7QUFDRDs7QUFDRCxXQUFLLElBQU1MLElBQVgsSUFBbUJtQixNQUFNLENBQUNELElBQUQsQ0FBekIsRUFBaUM7QUFDL0JuQixRQUFBQSxvQkFBb0IsQ0FBQ3FCLGlCQUFyQixDQUNFcEIsSUFERixFQUVFbUIsTUFBTSxDQUFDRCxJQUFELENBRlIsRUFHRSxnQkFBZ0JBLElBSGxCO0FBS0Q7QUFDRjs7OzJDQUs2QkcsYyxFQUFnQjtBQUM1QyxVQUFJLENBQUNsQixPQUFELElBQVlDLE1BQU0sQ0FBQ0MsdUJBQXZCLEVBQWdEO0FBQzlDO0FBQ0Q7O0FBQ0QsV0FBSyxJQUFNaUIsR0FBWCxJQUFrQkQsY0FBbEIsRUFBa0M7QUFDaENmLFFBQUFBLGlCQUFpQixDQUFDZ0IsR0FBRCxDQUFqQixHQUF5QkQsY0FBYyxDQUFDQyxHQUFELENBQXZDO0FBQ0Q7QUFDRjs7Ozs7QUFHSCxJQUFNUCxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFTUCxRQUFULEVBQW1CUCxLQUFuQixFQUEwQkMsTUFBMUIsRUFBbUNPLFFBQW5DLEVBQThDO0FBQy9EWixFQUFBQSxTQUFTLENBQ1AsS0FETyxFQUVQVyxRQUFRLEdBQ04sSUFERixJQUVHTixNQUFNLElBQUksYUFGYixJQUdFLElBSEYsR0FJRVEsSUFBSSxDQUFDQyxTQUFMLENBQWVWLEtBQWYsRUFBc0IsSUFBdEIsRUFBNEIsSUFBNUIsQ0FKRixJQUtHUSxRQUFRLElBQUksRUFMZixDQUZPLENBQVQ7QUFTRCxDQVZEOztBQVlBLElBQU1ILGlCQUFpQixHQUFHLEVBQTFCOztBQUVBLElBQUlILE9BQU8sSUFBSSxDQUFDQyxNQUFNLENBQUNDLHVCQUF2QixFQUFnRDtBQUM5Q04sRUFBQUEsb0JBQW9CLENBQUN3QixzQkFBckIsQ0FBNEM5Qiw2QkFBNUM7QUFDQU0sRUFBQUEsb0JBQW9CLENBQUN3QixzQkFBckIsQ0FBNEM1Qiw0QkFBNUM7QUFDQUksRUFBQUEsb0JBQW9CLENBQUN3QixzQkFBckIsQ0FBNEMzQiw0QkFBNUM7QUFDRDs7QUFFRDRCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjFCLG9CQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IERlcHJlY2F0ZWRJbWFnZVN0eWxlUHJvcFR5cGVzID0gcmVxdWlyZSgnLi4vRGVwcmVjYXRlZFByb3BUeXBlcy9EZXByZWNhdGVkSW1hZ2VTdHlsZVByb3BUeXBlcycpO1xuY29uc3QgRGVwcmVjYXRlZFRleHRTdHlsZVByb3BUeXBlcyA9IHJlcXVpcmUoJy4uL0RlcHJlY2F0ZWRQcm9wVHlwZXMvRGVwcmVjYXRlZFRleHRTdHlsZVByb3BUeXBlcycpO1xuY29uc3QgRGVwcmVjYXRlZFZpZXdTdHlsZVByb3BUeXBlcyA9IHJlcXVpcmUoJy4uL0RlcHJlY2F0ZWRQcm9wVHlwZXMvRGVwcmVjYXRlZFZpZXdTdHlsZVByb3BUeXBlcycpO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxuLy8gSGFyZGNvZGVkIGJlY2F1c2UgdGhpcyBpcyBhIGxlZ2l0IGNhc2UgYnV0IHdlIGRvbid0IHdhbnQgdG8gbG9hZCBpdCBmcm9tXG4vLyBhIHByaXZhdGUgQVBJLiBXZSBtaWdodCBsaWtlbHkgd2FudCB0byB1bmlmeSBzdHlsZSBzaGVldCBjcmVhdGlvbiB3aXRoIGhvdyBpdFxuLy8gaXMgZG9uZSBpbiB0aGUgRE9NIHNvIHRoaXMgbWlnaHQgbW92ZSBpbnRvIFJlYWN0LiBJIGtub3cgd2hhdCBJJ20gZG9pbmcgc29cbi8vIHBseiBkb24ndCBmaXJlIG1lLlxuY29uc3QgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5jbGFzcyBTdHlsZVNoZWV0VmFsaWRhdGlvbiB7XG4gIHN0YXRpYyB2YWxpZGF0ZVN0eWxlUHJvcChwcm9wOiBzdHJpbmcsIHN0eWxlOiBPYmplY3QsIGNhbGxlcjogc3RyaW5nKSB7XG4gICAgaWYgKCFfX0RFVl9fIHx8IGdsb2JhbC5fX1JDVFByb2ZpbGVJc1Byb2ZpbGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoYWxsU3R5bGVQcm9wVHlwZXNbcHJvcF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgbWVzc2FnZTEgPSAnXCInICsgcHJvcCArICdcIiBpcyBub3QgYSB2YWxpZCBzdHlsZSBwcm9wZXJ0eS4nO1xuICAgICAgY29uc3QgbWVzc2FnZTIgPVxuICAgICAgICAnXFxuVmFsaWQgc3R5bGUgcHJvcHM6ICcgK1xuICAgICAgICBKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhhbGxTdHlsZVByb3BUeXBlcykuc29ydCgpLCBudWxsLCAnICAnKTtcbiAgICAgIHN0eWxlRXJyb3IobWVzc2FnZTEsIHN0eWxlLCBjYWxsZXIsIG1lc3NhZ2UyKTtcbiAgICB9XG4gICAgY29uc3QgZXJyb3IgPSBhbGxTdHlsZVByb3BUeXBlc1twcm9wXShcbiAgICAgIHN0eWxlLFxuICAgICAgcHJvcCxcbiAgICAgIGNhbGxlcixcbiAgICAgICdwcm9wJyxcbiAgICAgIG51bGwsXG4gICAgICBSZWFjdFByb3BUeXBlc1NlY3JldCxcbiAgICApO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgc3R5bGVFcnJvcihlcnJvci5tZXNzYWdlLCBzdHlsZSwgY2FsbGVyKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgdmFsaWRhdGVTdHlsZShuYW1lOiBzdHJpbmcsIHN0eWxlczogT2JqZWN0KSB7XG4gICAgaWYgKCFfX0RFVl9fIHx8IGdsb2JhbC5fX1JDVFByb2ZpbGVJc1Byb2ZpbGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHByb3AgaW4gc3R5bGVzW25hbWVdKSB7XG4gICAgICBTdHlsZVNoZWV0VmFsaWRhdGlvbi52YWxpZGF0ZVN0eWxlUHJvcChcbiAgICAgICAgcHJvcCxcbiAgICAgICAgc3R5bGVzW25hbWVdLFxuICAgICAgICAnU3R5bGVTaGVldCAnICsgbmFtZSxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyogJEZsb3dGaXhNZSg+PTAuODUuMCBzaXRlPXJlYWN0X25hdGl2ZV9mYikgVGhpcyBjb21tZW50IHN1cHByZXNzZXMgYW4gZXJyb3JcbiAgICogZm91bmQgd2hlbiBGbG93IHYwLjg1IHdhcyBkZXBsb3llZC4gVG8gc2VlIHRoZSBlcnJvciwgZGVsZXRlIHRoaXMgY29tbWVudFxuICAgKiBhbmQgcnVuIEZsb3cuICovXG4gIHN0YXRpYyBhZGRWYWxpZFN0eWxlUHJvcFR5cGVzKHN0eWxlUHJvcFR5cGVzKSB7XG4gICAgaWYgKCFfX0RFVl9fIHx8IGdsb2JhbC5fX1JDVFByb2ZpbGVJc1Byb2ZpbGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzdHlsZVByb3BUeXBlcykge1xuICAgICAgYWxsU3R5bGVQcm9wVHlwZXNba2V5XSA9IHN0eWxlUHJvcFR5cGVzW2tleV07XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHN0eWxlRXJyb3IgPSBmdW5jdGlvbihtZXNzYWdlMSwgc3R5bGUsIGNhbGxlcj8sIG1lc3NhZ2UyPykge1xuICBpbnZhcmlhbnQoXG4gICAgZmFsc2UsXG4gICAgbWVzc2FnZTEgK1xuICAgICAgJ1xcbicgK1xuICAgICAgKGNhbGxlciB8fCAnPDx1bmtub3duPj4nKSArXG4gICAgICAnOiAnICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHN0eWxlLCBudWxsLCAnICAnKSArXG4gICAgICAobWVzc2FnZTIgfHwgJycpLFxuICApO1xufTtcblxuY29uc3QgYWxsU3R5bGVQcm9wVHlwZXMgPSB7fTtcblxuaWYgKF9fREVWX18gJiYgIWdsb2JhbC5fX1JDVFByb2ZpbGVJc1Byb2ZpbGluZykge1xuICBTdHlsZVNoZWV0VmFsaWRhdGlvbi5hZGRWYWxpZFN0eWxlUHJvcFR5cGVzKERlcHJlY2F0ZWRJbWFnZVN0eWxlUHJvcFR5cGVzKTtcbiAgU3R5bGVTaGVldFZhbGlkYXRpb24uYWRkVmFsaWRTdHlsZVByb3BUeXBlcyhEZXByZWNhdGVkVGV4dFN0eWxlUHJvcFR5cGVzKTtcbiAgU3R5bGVTaGVldFZhbGlkYXRpb24uYWRkVmFsaWRTdHlsZVByb3BUeXBlcyhEZXByZWNhdGVkVmlld1N0eWxlUHJvcFR5cGVzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdHlsZVNoZWV0VmFsaWRhdGlvbjtcbiJdfQ==