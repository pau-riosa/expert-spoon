{"version":3,"sources":["LogBoxLog.js"],"names":["LogBoxLog","data","symbolicated","error","stack","status","level","message","category","componentStack","codeFrame","isComponentError","count","callback","LogBoxSymbolication","deleteStack","handleSymbolicate","updateStatus","symbolicate","then","lastStatus"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport * as LogBoxSymbolication from './LogBoxSymbolication';\n\nimport type {\n  Category,\n  Message,\n  ComponentStack,\n  CodeFrame,\n} from './parseLogBoxLog';\nimport type {Stack} from './LogBoxSymbolication';\n\ntype SymbolicationStatus = 'NONE' | 'PENDING' | 'COMPLETE' | 'FAILED';\n\nexport type LogLevel = 'warn' | 'error' | 'fatal' | 'syntax';\n\nexport type LogBoxLogData = $ReadOnly<{|\n  level: LogLevel,\n  message: Message,\n  stack: Stack,\n  category: string,\n  componentStack: ComponentStack,\n  codeFrame?: ?CodeFrame,\n  isComponentError: boolean,\n|}>;\n\nclass LogBoxLog {\n  message: Message;\n  category: Category;\n  componentStack: ComponentStack;\n  stack: Stack;\n  count: number;\n  level: LogLevel;\n  codeFrame: ?CodeFrame;\n  isComponentError: boolean;\n  symbolicated:\n    | $ReadOnly<{|error: null, stack: null, status: 'NONE'|}>\n    | $ReadOnly<{|error: null, stack: null, status: 'PENDING'|}>\n    | $ReadOnly<{|error: null, stack: Stack, status: 'COMPLETE'|}>\n    | $ReadOnly<{|error: Error, stack: null, status: 'FAILED'|}> = {\n    error: null,\n    stack: null,\n    status: 'NONE',\n  };\n\n  constructor(data: LogBoxLogData) {\n    this.level = data.level;\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.count = 1;\n  }\n\n  incrementCount(): void {\n    this.count += 1;\n  }\n\n  getAvailableStack(): Stack {\n    return this.symbolicated.status === 'COMPLETE'\n      ? this.symbolicated.stack\n      : this.stack;\n  }\n\n  retrySymbolicate(callback?: (status: SymbolicationStatus) => void): void {\n    if (this.symbolicated.status !== 'COMPLETE') {\n      LogBoxSymbolication.deleteStack(this.stack);\n      this.handleSymbolicate(callback);\n    }\n  }\n\n  symbolicate(callback?: (status: SymbolicationStatus) => void): void {\n    if (this.symbolicated.status === 'NONE') {\n      this.handleSymbolicate(callback);\n    }\n  }\n\n  handleSymbolicate(callback?: (status: SymbolicationStatus) => void): void {\n    if (this.symbolicated.status !== 'PENDING') {\n      this.updateStatus(null, null, null, callback);\n      LogBoxSymbolication.symbolicate(this.stack).then(\n        data => {\n          this.updateStatus(null, data?.stack, data?.codeFrame, callback);\n        },\n        error => {\n          this.updateStatus(error, null, null, callback);\n        },\n      );\n    }\n  }\n\n  updateStatus(\n    error: ?Error,\n    stack: ?Stack,\n    codeFrame: ?CodeFrame,\n    callback?: (status: SymbolicationStatus) => void,\n  ): void {\n    const lastStatus = this.symbolicated.status;\n    if (error != null) {\n      this.symbolicated = {\n        error,\n        stack: null,\n        status: 'FAILED',\n      };\n    } else if (stack != null) {\n      if (codeFrame) {\n        this.codeFrame = codeFrame;\n      }\n\n      this.symbolicated = {\n        error: null,\n        stack,\n        status: 'COMPLETE',\n      };\n    } else {\n      this.symbolicated = {\n        error: null,\n        stack: null,\n        status: 'PENDING',\n      };\n    }\n\n    if (callback && lastStatus !== this.symbolicated.status) {\n      callback(this.symbolicated.status);\n    }\n  }\n}\n\nexport default LogBoxLog;\n"]}