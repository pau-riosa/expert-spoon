2929e59b246efdf234b2a8c6c971e021
'use strict';

var BatchedBridge = require('../BatchedBridge/BatchedBridge');

var EventEmitter = require('../vendor/emitter/EventEmitter');

var TaskQueue = require('./TaskQueue');

var infoLog = require('../Utilities/infoLog');

var invariant = require('invariant');

var keyMirror = require('fbjs/lib/keyMirror');

var _emitter = new EventEmitter();

var DEBUG_DELAY = 0;
var DEBUG = false;
var InteractionManager = {
  Events: keyMirror({
    interactionStart: true,
    interactionComplete: true
  }),
  runAfterInteractions: function runAfterInteractions(task) {
    var tasks = [];
    var promise = new Promise(function (resolve) {
      _scheduleUpdate();

      if (task) {
        tasks.push(task);
      }

      tasks.push({
        run: resolve,
        name: 'resolve ' + (task && task.name || '?')
      });

      _taskQueue.enqueueTasks(tasks);
    });
    return {
      then: promise.then.bind(promise),
      done: function done() {
        if (promise.done) {
          return promise.done.apply(promise, arguments);
        } else {
          console.warn('Tried to call done when not supported by current Promise implementation.');
        }
      },
      cancel: function cancel() {
        _taskQueue.cancelTasks(tasks);
      }
    };
  },
  createInteractionHandle: function createInteractionHandle() {
    DEBUG && infoLog('InteractionManager: create interaction handle');

    _scheduleUpdate();

    var handle = ++_inc;

    _addInteractionSet.add(handle);

    return handle;
  },
  clearInteractionHandle: function clearInteractionHandle(handle) {
    DEBUG && infoLog('InteractionManager: clear interaction handle');
    invariant(!!handle, 'InteractionManager: Must provide a handle to clear.');

    _scheduleUpdate();

    _addInteractionSet.delete(handle);

    _deleteInteractionSet.add(handle);
  },
  addListener: _emitter.addListener.bind(_emitter),
  setDeadline: function setDeadline(deadline) {
    _deadline = deadline;
  }
};

var _interactionSet = new Set();

var _addInteractionSet = new Set();

var _deleteInteractionSet = new Set();

var _taskQueue = new TaskQueue({
  onMoreTasks: _scheduleUpdate
});

var _nextUpdateHandle = 0;
var _inc = 0;

var _deadline = -1;

function _scheduleUpdate() {
  if (!_nextUpdateHandle) {
    if (_deadline > 0) {
      _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);
    } else {
      _nextUpdateHandle = setImmediate(_processUpdate);
    }
  }
}

function _processUpdate() {
  _nextUpdateHandle = 0;
  var interactionCount = _interactionSet.size;

  _addInteractionSet.forEach(function (handle) {
    return _interactionSet.add(handle);
  });

  _deleteInteractionSet.forEach(function (handle) {
    return _interactionSet.delete(handle);
  });

  var nextInteractionCount = _interactionSet.size;

  if (interactionCount !== 0 && nextInteractionCount === 0) {
    _emitter.emit(InteractionManager.Events.interactionComplete);
  } else if (interactionCount === 0 && nextInteractionCount !== 0) {
    _emitter.emit(InteractionManager.Events.interactionStart);
  }

  if (nextInteractionCount === 0) {
    while (_taskQueue.hasTasksToProcess()) {
      _taskQueue.processNext();

      if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {
        _scheduleUpdate();

        break;
      }
    }
  }

  _addInteractionSet.clear();

  _deleteInteractionSet.clear();
}

module.exports = InteractionManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkludGVyYWN0aW9uTWFuYWdlci5qcyJdLCJuYW1lcyI6WyJCYXRjaGVkQnJpZGdlIiwicmVxdWlyZSIsIkV2ZW50RW1pdHRlciIsIlRhc2tRdWV1ZSIsImluZm9Mb2ciLCJpbnZhcmlhbnQiLCJrZXlNaXJyb3IiLCJfZW1pdHRlciIsIkRFQlVHX0RFTEFZIiwiREVCVUciLCJJbnRlcmFjdGlvbk1hbmFnZXIiLCJFdmVudHMiLCJpbnRlcmFjdGlvblN0YXJ0IiwiaW50ZXJhY3Rpb25Db21wbGV0ZSIsInJ1bkFmdGVySW50ZXJhY3Rpb25zIiwidGFzayIsInRhc2tzIiwicHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiX3NjaGVkdWxlVXBkYXRlIiwicHVzaCIsInJ1biIsIm5hbWUiLCJfdGFza1F1ZXVlIiwiZW5xdWV1ZVRhc2tzIiwidGhlbiIsImJpbmQiLCJkb25lIiwiY29uc29sZSIsIndhcm4iLCJjYW5jZWwiLCJjYW5jZWxUYXNrcyIsImNyZWF0ZUludGVyYWN0aW9uSGFuZGxlIiwiaGFuZGxlIiwiX2luYyIsIl9hZGRJbnRlcmFjdGlvblNldCIsImFkZCIsImNsZWFySW50ZXJhY3Rpb25IYW5kbGUiLCJkZWxldGUiLCJfZGVsZXRlSW50ZXJhY3Rpb25TZXQiLCJhZGRMaXN0ZW5lciIsInNldERlYWRsaW5lIiwiZGVhZGxpbmUiLCJfZGVhZGxpbmUiLCJfaW50ZXJhY3Rpb25TZXQiLCJTZXQiLCJvbk1vcmVUYXNrcyIsIl9uZXh0VXBkYXRlSGFuZGxlIiwic2V0VGltZW91dCIsIl9wcm9jZXNzVXBkYXRlIiwic2V0SW1tZWRpYXRlIiwiaW50ZXJhY3Rpb25Db3VudCIsInNpemUiLCJmb3JFYWNoIiwibmV4dEludGVyYWN0aW9uQ291bnQiLCJlbWl0IiwiaGFzVGFza3NUb1Byb2Nlc3MiLCJwcm9jZXNzTmV4dCIsImdldEV2ZW50TG9vcFJ1bm5pbmdUaW1lIiwiY2xlYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7QUFF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QUFBLEdBQXBDOztBQUNBLE1BQU1xQixvQkFBb0IsR0FBR1YsZUFBZSxDQUFDUSxJQUE3Qzs7QUFFQSxNQUFJRCxnQkFBZ0IsS0FBSyxDQUFyQixJQUEwQkcsb0JBQW9CLEtBQUssQ0FBdkQsRUFBMEQ7QUFFeERoRCxJQUFBQSxRQUFRLENBQUNpRCxJQUFULENBQWM5QyxrQkFBa0IsQ0FBQ0MsTUFBbkIsQ0FBMEJFLG1CQUF4QztBQUNELEdBSEQsTUFHTyxJQUFJdUMsZ0JBQWdCLEtBQUssQ0FBckIsSUFBMEJHLG9CQUFvQixLQUFLLENBQXZELEVBQTBEO0FBRS9EaEQsSUFBQUEsUUFBUSxDQUFDaUQsSUFBVCxDQUFjOUMsa0JBQWtCLENBQUNDLE1BQW5CLENBQTBCQyxnQkFBeEM7QUFDRDs7QUFHRCxNQUFJMkMsb0JBQW9CLEtBQUssQ0FBN0IsRUFBZ0M7QUFDOUIsV0FBTy9CLFVBQVUsQ0FBQ2lDLGlCQUFYLEVBQVAsRUFBdUM7QUFDckNqQyxNQUFBQSxVQUFVLENBQUNrQyxXQUFYOztBQUNBLFVBQ0VkLFNBQVMsR0FBRyxDQUFaLElBQ0E1QyxhQUFhLENBQUMyRCx1QkFBZCxNQUEyQ2YsU0FGN0MsRUFHRTtBQUVBeEIsUUFBQUEsZUFBZTs7QUFDZjtBQUNEO0FBQ0Y7QUFDRjs7QUFDRGdCLEVBQUFBLGtCQUFrQixDQUFDd0IsS0FBbkI7O0FBQ0FwQixFQUFBQSxxQkFBcUIsQ0FBQ29CLEtBQXRCO0FBQ0Q7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnBELGtCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEJhdGNoZWRCcmlkZ2UgPSByZXF1aXJlKCcuLi9CYXRjaGVkQnJpZGdlL0JhdGNoZWRCcmlkZ2UnKTtcbmNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJy4uL3ZlbmRvci9lbWl0dGVyL0V2ZW50RW1pdHRlcicpO1xuY29uc3QgVGFza1F1ZXVlID0gcmVxdWlyZSgnLi9UYXNrUXVldWUnKTtcblxuY29uc3QgaW5mb0xvZyA9IHJlcXVpcmUoJy4uL1V0aWxpdGllcy9pbmZvTG9nJyk7XG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcbmNvbnN0IGtleU1pcnJvciA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU1pcnJvcicpO1xuXG5leHBvcnQgdHlwZSBIYW5kbGUgPSBudW1iZXI7XG5pbXBvcnQgdHlwZSB7VGFza30gZnJvbSAnLi9UYXNrUXVldWUnO1xuXG5jb25zdCBfZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuY29uc3QgREVCVUdfREVMQVk6IDAgPSAwO1xuY29uc3QgREVCVUc6IGZhbHNlID0gZmFsc2U7XG5cbi8qKlxuICogSW50ZXJhY3Rpb25NYW5hZ2VyIGFsbG93cyBsb25nLXJ1bm5pbmcgd29yayB0byBiZSBzY2hlZHVsZWQgYWZ0ZXIgYW55XG4gKiBpbnRlcmFjdGlvbnMvYW5pbWF0aW9ucyBoYXZlIGNvbXBsZXRlZC4gSW4gcGFydGljdWxhciwgdGhpcyBhbGxvd3MgSmF2YVNjcmlwdFxuICogYW5pbWF0aW9ucyB0byBydW4gc21vb3RobHkuXG4gKlxuICogQXBwbGljYXRpb25zIGNhbiBzY2hlZHVsZSB0YXNrcyB0byBydW4gYWZ0ZXIgaW50ZXJhY3Rpb25zIHdpdGggdGhlIGZvbGxvd2luZzpcbiAqXG4gKiBgYGBcbiAqIEludGVyYWN0aW9uTWFuYWdlci5ydW5BZnRlckludGVyYWN0aW9ucygoKSA9PiB7XG4gKiAgIC8vIC4uLmxvbmctcnVubmluZyBzeW5jaHJvbm91cyB0YXNrLi4uXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIENvbXBhcmUgdGhpcyB0byBvdGhlciBzY2hlZHVsaW5nIGFsdGVybmF0aXZlczpcbiAqXG4gKiAtIHJlcXVlc3RBbmltYXRpb25GcmFtZSgpOiBmb3IgY29kZSB0aGF0IGFuaW1hdGVzIGEgdmlldyBvdmVyIHRpbWUuXG4gKiAtIHNldEltbWVkaWF0ZS9zZXRUaW1lb3V0KCk6IHJ1biBjb2RlIGxhdGVyLCBub3RlIHRoaXMgbWF5IGRlbGF5IGFuaW1hdGlvbnMuXG4gKiAtIHJ1bkFmdGVySW50ZXJhY3Rpb25zKCk6IHJ1biBjb2RlIGxhdGVyLCB3aXRob3V0IGRlbGF5aW5nIGFjdGl2ZSBhbmltYXRpb25zLlxuICpcbiAqIFRoZSB0b3VjaCBoYW5kbGluZyBzeXN0ZW0gY29uc2lkZXJzIG9uZSBvciBtb3JlIGFjdGl2ZSB0b3VjaGVzIHRvIGJlIGFuXG4gKiAnaW50ZXJhY3Rpb24nIGFuZCB3aWxsIGRlbGF5IGBydW5BZnRlckludGVyYWN0aW9ucygpYCBjYWxsYmFja3MgdW50aWwgYWxsXG4gKiB0b3VjaGVzIGhhdmUgZW5kZWQgb3IgYmVlbiBjYW5jZWxsZWQuXG4gKlxuICogSW50ZXJhY3Rpb25NYW5hZ2VyIGFsc28gYWxsb3dzIGFwcGxpY2F0aW9ucyB0byByZWdpc3RlciBhbmltYXRpb25zIGJ5XG4gKiBjcmVhdGluZyBhbiBpbnRlcmFjdGlvbiAnaGFuZGxlJyBvbiBhbmltYXRpb24gc3RhcnQsIGFuZCBjbGVhcmluZyBpdCB1cG9uXG4gKiBjb21wbGV0aW9uOlxuICpcbiAqIGBgYFxuICogdmFyIGhhbmRsZSA9IEludGVyYWN0aW9uTWFuYWdlci5jcmVhdGVJbnRlcmFjdGlvbkhhbmRsZSgpO1xuICogLy8gcnVuIGFuaW1hdGlvbi4uLiAoYHJ1bkFmdGVySW50ZXJhY3Rpb25zYCB0YXNrcyBhcmUgcXVldWVkKVxuICogLy8gbGF0ZXIsIG9uIGFuaW1hdGlvbiBjb21wbGV0aW9uOlxuICogSW50ZXJhY3Rpb25NYW5hZ2VyLmNsZWFySW50ZXJhY3Rpb25IYW5kbGUoaGFuZGxlKTtcbiAqIC8vIHF1ZXVlZCB0YXNrcyBydW4gaWYgYWxsIGhhbmRsZXMgd2VyZSBjbGVhcmVkXG4gKiBgYGBcbiAqXG4gKiBgcnVuQWZ0ZXJJbnRlcmFjdGlvbnNgIHRha2VzIGVpdGhlciBhIHBsYWluIGNhbGxiYWNrIGZ1bmN0aW9uLCBvciBhXG4gKiBgUHJvbWlzZVRhc2tgIG9iamVjdCB3aXRoIGEgYGdlbmAgbWV0aG9kIHRoYXQgcmV0dXJucyBhIGBQcm9taXNlYC4gIElmIGFcbiAqIGBQcm9taXNlVGFza2AgaXMgc3VwcGxpZWQsIHRoZW4gaXQgaXMgZnVsbHkgcmVzb2x2ZWQgKGluY2x1ZGluZyBhc3luY2hyb25vdXNcbiAqIGRlcGVuZGVuY2llcyB0aGF0IGFsc28gc2NoZWR1bGUgbW9yZSB0YXNrcyB2aWEgYHJ1bkFmdGVySW50ZXJhY3Rpb25zYCkgYmVmb3JlXG4gKiBzdGFydGluZyBvbiB0aGUgbmV4dCB0YXNrIHRoYXQgbWlnaHQgaGF2ZSBiZWVuIHF1ZXVlZCB1cCBzeW5jaHJvbm91c2x5XG4gKiBlYXJsaWVyLlxuICpcbiAqIEJ5IGRlZmF1bHQsIHF1ZXVlZCB0YXNrcyBhcmUgZXhlY3V0ZWQgdG9nZXRoZXIgaW4gYSBsb29wIGluIG9uZVxuICogYHNldEltbWVkaWF0ZWAgYmF0Y2guIElmIGBzZXREZWFkbGluZWAgaXMgY2FsbGVkIHdpdGggYSBwb3NpdGl2ZSBudW1iZXIsIHRoZW5cbiAqIHRhc2tzIHdpbGwgb25seSBiZSBleGVjdXRlZCB1bnRpbCB0aGUgZGVhZGxpbmUgKGluIHRlcm1zIG9mIGpzIGV2ZW50IGxvb3AgcnVuXG4gKiB0aW1lKSBhcHByb2FjaGVzLCBhdCB3aGljaCBwb2ludCBleGVjdXRpb24gd2lsbCB5aWVsZCB2aWEgc2V0VGltZW91dCxcbiAqIGFsbG93aW5nIGV2ZW50cyBzdWNoIGFzIHRvdWNoZXMgdG8gc3RhcnQgaW50ZXJhY3Rpb25zIGFuZCBibG9jayBxdWV1ZWQgdGFza3NcbiAqIGZyb20gZXhlY3V0aW5nLCBtYWtpbmcgYXBwcyBtb3JlIHJlc3BvbnNpdmUuXG4gKi9cbmNvbnN0IEludGVyYWN0aW9uTWFuYWdlciA9IHtcbiAgRXZlbnRzOiBrZXlNaXJyb3Ioe1xuICAgIGludGVyYWN0aW9uU3RhcnQ6IHRydWUsXG4gICAgaW50ZXJhY3Rpb25Db21wbGV0ZTogdHJ1ZSxcbiAgfSksXG5cbiAgLyoqXG4gICAqIFNjaGVkdWxlIGEgZnVuY3Rpb24gdG8gcnVuIGFmdGVyIGFsbCBpbnRlcmFjdGlvbnMgaGF2ZSBjb21wbGV0ZWQuIFJldHVybnMgYSBjYW5jZWxsYWJsZVxuICAgKiBcInByb21pc2VcIi5cbiAgICovXG4gIHJ1bkFmdGVySW50ZXJhY3Rpb25zKFxuICAgIHRhc2s6ID9UYXNrLFxuICApOiB7XG4gICAgdGhlbjogRnVuY3Rpb24sXG4gICAgZG9uZTogRnVuY3Rpb24sXG4gICAgY2FuY2VsOiBGdW5jdGlvbixcbiAgICAuLi5cbiAgfSB7XG4gICAgY29uc3QgdGFza3MgPSBbXTtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBfc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgIHRhc2tzLnB1c2godGFzayk7XG4gICAgICB9XG4gICAgICB0YXNrcy5wdXNoKHtcbiAgICAgICAgcnVuOiByZXNvbHZlLFxuICAgICAgICBuYW1lOiAncmVzb2x2ZSAnICsgKCh0YXNrICYmIHRhc2submFtZSkgfHwgJz8nKSxcbiAgICAgIH0pO1xuICAgICAgX3Rhc2tRdWV1ZS5lbnF1ZXVlVGFza3ModGFza3MpO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICB0aGVuOiBwcm9taXNlLnRoZW4uYmluZChwcm9taXNlKSxcbiAgICAgIGRvbmU6ICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGlmIChwcm9taXNlLmRvbmUpIHtcbiAgICAgICAgICByZXR1cm4gcHJvbWlzZS5kb25lKC4uLmFyZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICdUcmllZCB0byBjYWxsIGRvbmUgd2hlbiBub3Qgc3VwcG9ydGVkIGJ5IGN1cnJlbnQgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbi4nLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjYW5jZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICBfdGFza1F1ZXVlLmNhbmNlbFRhc2tzKHRhc2tzKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogTm90aWZ5IG1hbmFnZXIgdGhhdCBhbiBpbnRlcmFjdGlvbiBoYXMgc3RhcnRlZC5cbiAgICovXG4gIGNyZWF0ZUludGVyYWN0aW9uSGFuZGxlKCk6IEhhbmRsZSB7XG4gICAgREVCVUcgJiYgaW5mb0xvZygnSW50ZXJhY3Rpb25NYW5hZ2VyOiBjcmVhdGUgaW50ZXJhY3Rpb24gaGFuZGxlJyk7XG4gICAgX3NjaGVkdWxlVXBkYXRlKCk7XG4gICAgY29uc3QgaGFuZGxlID0gKytfaW5jO1xuICAgIF9hZGRJbnRlcmFjdGlvblNldC5hZGQoaGFuZGxlKTtcbiAgICByZXR1cm4gaGFuZGxlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBOb3RpZnkgbWFuYWdlciB0aGF0IGFuIGludGVyYWN0aW9uIGhhcyBjb21wbGV0ZWQuXG4gICAqL1xuICBjbGVhckludGVyYWN0aW9uSGFuZGxlKGhhbmRsZTogSGFuZGxlKSB7XG4gICAgREVCVUcgJiYgaW5mb0xvZygnSW50ZXJhY3Rpb25NYW5hZ2VyOiBjbGVhciBpbnRlcmFjdGlvbiBoYW5kbGUnKTtcbiAgICBpbnZhcmlhbnQoISFoYW5kbGUsICdJbnRlcmFjdGlvbk1hbmFnZXI6IE11c3QgcHJvdmlkZSBhIGhhbmRsZSB0byBjbGVhci4nKTtcbiAgICBfc2NoZWR1bGVVcGRhdGUoKTtcbiAgICBfYWRkSW50ZXJhY3Rpb25TZXQuZGVsZXRlKGhhbmRsZSk7XG4gICAgX2RlbGV0ZUludGVyYWN0aW9uU2V0LmFkZChoYW5kbGUpO1xuICB9LFxuXG4gIGFkZExpc3RlbmVyOiAoX2VtaXR0ZXIuYWRkTGlzdGVuZXIuYmluZChfZW1pdHRlcik6ICRGbG93Rml4TWUpLFxuXG4gIC8qKlxuICAgKiBBIHBvc2l0aXZlIG51bWJlciB3aWxsIHVzZSBzZXRUaW1lb3V0IHRvIHNjaGVkdWxlIGFueSB0YXNrcyBhZnRlciB0aGVcbiAgICogZXZlbnRMb29wUnVubmluZ1RpbWUgaGl0cyB0aGUgZGVhZGxpbmUgdmFsdWUsIG90aGVyd2lzZSBhbGwgdGFza3Mgd2lsbCBiZVxuICAgKiBleGVjdXRlZCBpbiBvbmUgc2V0SW1tZWRpYXRlIGJhdGNoIChkZWZhdWx0KS5cbiAgICovXG4gIHNldERlYWRsaW5lKGRlYWRsaW5lOiBudW1iZXIpIHtcbiAgICBfZGVhZGxpbmUgPSBkZWFkbGluZTtcbiAgfSxcbn07XG5cbmNvbnN0IF9pbnRlcmFjdGlvblNldCA9IG5ldyBTZXQoKTtcbmNvbnN0IF9hZGRJbnRlcmFjdGlvblNldCA9IG5ldyBTZXQoKTtcbmNvbnN0IF9kZWxldGVJbnRlcmFjdGlvblNldCA9IG5ldyBTZXQoKTtcbmNvbnN0IF90YXNrUXVldWUgPSBuZXcgVGFza1F1ZXVlKHtvbk1vcmVUYXNrczogX3NjaGVkdWxlVXBkYXRlfSk7XG5sZXQgX25leHRVcGRhdGVIYW5kbGUgPSAwO1xubGV0IF9pbmMgPSAwO1xubGV0IF9kZWFkbGluZSA9IC0xO1xuXG5kZWNsYXJlIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjazogYW55LCAuLi5hcmdzOiBBcnJheTxhbnk+KTogbnVtYmVyO1xuXG4vKipcbiAqIFNjaGVkdWxlIGFuIGFzeW5jaHJvbm91cyB1cGRhdGUgdG8gdGhlIGludGVyYWN0aW9uIHN0YXRlLlxuICovXG5mdW5jdGlvbiBfc2NoZWR1bGVVcGRhdGUoKSB7XG4gIGlmICghX25leHRVcGRhdGVIYW5kbGUpIHtcbiAgICBpZiAoX2RlYWRsaW5lID4gMCkge1xuICAgICAgLyogJEZsb3dGaXhNZSg+PTAuNjMuMCBzaXRlPXJlYWN0X25hdGl2ZV9mYikgVGhpcyBjb21tZW50IHN1cHByZXNzZXMgYW5cbiAgICAgICAqIGVycm9yIGZvdW5kIHdoZW4gRmxvdyB2MC42MyB3YXMgZGVwbG95ZWQuIFRvIHNlZSB0aGUgZXJyb3IgZGVsZXRlIHRoaXNcbiAgICAgICAqIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuICAgICAgX25leHRVcGRhdGVIYW5kbGUgPSBzZXRUaW1lb3V0KF9wcm9jZXNzVXBkYXRlLCAwICsgREVCVUdfREVMQVkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfbmV4dFVwZGF0ZUhhbmRsZSA9IHNldEltbWVkaWF0ZShfcHJvY2Vzc1VwZGF0ZSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogTm90aWZ5IGxpc3RlbmVycywgcHJvY2VzcyBxdWV1ZSwgZXRjXG4gKi9cbmZ1bmN0aW9uIF9wcm9jZXNzVXBkYXRlKCkge1xuICBfbmV4dFVwZGF0ZUhhbmRsZSA9IDA7XG5cbiAgY29uc3QgaW50ZXJhY3Rpb25Db3VudCA9IF9pbnRlcmFjdGlvblNldC5zaXplO1xuICBfYWRkSW50ZXJhY3Rpb25TZXQuZm9yRWFjaChoYW5kbGUgPT4gX2ludGVyYWN0aW9uU2V0LmFkZChoYW5kbGUpKTtcbiAgX2RlbGV0ZUludGVyYWN0aW9uU2V0LmZvckVhY2goaGFuZGxlID0+IF9pbnRlcmFjdGlvblNldC5kZWxldGUoaGFuZGxlKSk7XG4gIGNvbnN0IG5leHRJbnRlcmFjdGlvbkNvdW50ID0gX2ludGVyYWN0aW9uU2V0LnNpemU7XG5cbiAgaWYgKGludGVyYWN0aW9uQ291bnQgIT09IDAgJiYgbmV4dEludGVyYWN0aW9uQ291bnQgPT09IDApIHtcbiAgICAvLyB0cmFuc2l0aW9uIGZyb20gMSsgLS0+IDAgaW50ZXJhY3Rpb25zXG4gICAgX2VtaXR0ZXIuZW1pdChJbnRlcmFjdGlvbk1hbmFnZXIuRXZlbnRzLmludGVyYWN0aW9uQ29tcGxldGUpO1xuICB9IGVsc2UgaWYgKGludGVyYWN0aW9uQ291bnQgPT09IDAgJiYgbmV4dEludGVyYWN0aW9uQ291bnQgIT09IDApIHtcbiAgICAvLyB0cmFuc2l0aW9uIGZyb20gMCAtLT4gMSsgaW50ZXJhY3Rpb25zXG4gICAgX2VtaXR0ZXIuZW1pdChJbnRlcmFjdGlvbk1hbmFnZXIuRXZlbnRzLmludGVyYWN0aW9uU3RhcnQpO1xuICB9XG5cbiAgLy8gcHJvY2VzcyB0aGUgcXVldWUgcmVnYXJkbGVzcyBvZiBhIHRyYW5zaXRpb25cbiAgaWYgKG5leHRJbnRlcmFjdGlvbkNvdW50ID09PSAwKSB7XG4gICAgd2hpbGUgKF90YXNrUXVldWUuaGFzVGFza3NUb1Byb2Nlc3MoKSkge1xuICAgICAgX3Rhc2tRdWV1ZS5wcm9jZXNzTmV4dCgpO1xuICAgICAgaWYgKFxuICAgICAgICBfZGVhZGxpbmUgPiAwICYmXG4gICAgICAgIEJhdGNoZWRCcmlkZ2UuZ2V0RXZlbnRMb29wUnVubmluZ1RpbWUoKSA+PSBfZGVhZGxpbmVcbiAgICAgICkge1xuICAgICAgICAvLyBIaXQgZGVhZGxpbmUgYmVmb3JlIHByb2Nlc3NpbmcgYWxsIHRhc2tzLCBzbyBwcm9jZXNzIG1vcmUgbGF0ZXIuXG4gICAgICAgIF9zY2hlZHVsZVVwZGF0ZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX2FkZEludGVyYWN0aW9uU2V0LmNsZWFyKCk7XG4gIF9kZWxldGVJbnRlcmFjdGlvblNldC5jbGVhcigpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyYWN0aW9uTWFuYWdlcjtcbiJdfQ==